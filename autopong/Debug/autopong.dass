
./Debug/autopong.elf:     file format elf32-littlearm


Disassembly of section .text:

20000000 <startup>:
 */
void startup(void) __attribute__((naked)) __attribute__((section (".start_section")) );

void startup ( void )
{
__asm volatile(
20000000:	4802      	ldr	r0, [pc, #8]	; (2000000c <_exit+0x4>)
20000002:	4685      	mov	sp, r0
20000004:	f000 fbcd 	bl	200007a2 <main>

20000008 <_exit>:
20000008:	e7fe      	b.n	20000008 <_exit>
	" LDR R0,=0x2001C000\n"		/* set stack */
	" MOV SP,R0\n"
	" BL main\n"				/* call main */
	"_exit: B .\n"				/* never return */
	) ;
}
2000000a:	46c0      	nop			; (mov r8, r8)
2000000c:	2001c000 	andcs	ip, r1, r0

20000010 <init_app>:
	clear_object,
	move_object,
	set_object_speed
};

void init_app(void){ 
20000010:	b580      	push	{r7, lr}
20000012:	af00      	add	r7, sp, #0
	*portModer = 0x55555555;
20000014:	4b02      	ldr	r3, [pc, #8]	; (20000020 <init_app+0x10>)
20000016:	4a03      	ldr	r2, [pc, #12]	; (20000024 <init_app+0x14>)
20000018:	601a      	str	r2, [r3, #0]
}	
2000001a:	46c0      	nop			; (mov r8, r8)
2000001c:	46bd      	mov	sp, r7
2000001e:	bd80      	pop	{r7, pc}
20000020:	40021000 	andmi	r1, r2, r0
20000024:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000028 <graphic_ctrl_bit_set>:

// Funktioner
static void graphic_ctrl_bit_set(uint8_t x) {
20000028:	b580      	push	{r7, lr}
2000002a:	b084      	sub	sp, #16
2000002c:	af00      	add	r7, sp, #0
2000002e:	0002      	movs	r2, r0
20000030:	1dfb      	adds	r3, r7, #7
20000032:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = *portOdrLow;
20000034:	4a12      	ldr	r2, [pc, #72]	; (20000080 <graphic_ctrl_bit_set+0x58>)
20000036:	230f      	movs	r3, #15
20000038:	18fb      	adds	r3, r7, r3
2000003a:	7812      	ldrb	r2, [r2, #0]
2000003c:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
2000003e:	230f      	movs	r3, #15
20000040:	18fb      	adds	r3, r7, r3
20000042:	220f      	movs	r2, #15
20000044:	18ba      	adds	r2, r7, r2
20000046:	7812      	ldrb	r2, [r2, #0]
20000048:	2104      	movs	r1, #4
2000004a:	438a      	bics	r2, r1
2000004c:	701a      	strb	r2, [r3, #0]
c |= (~B_SELECT & x);
2000004e:	1dfb      	adds	r3, r7, #7
20000050:	781b      	ldrb	r3, [r3, #0]
20000052:	b25b      	sxtb	r3, r3
20000054:	2204      	movs	r2, #4
20000056:	4393      	bics	r3, r2
20000058:	b25a      	sxtb	r2, r3
2000005a:	230f      	movs	r3, #15
2000005c:	18fb      	adds	r3, r7, r3
2000005e:	781b      	ldrb	r3, [r3, #0]
20000060:	b25b      	sxtb	r3, r3
20000062:	4313      	orrs	r3, r2
20000064:	b25a      	sxtb	r2, r3
20000066:	230f      	movs	r3, #15
20000068:	18fb      	adds	r3, r7, r3
2000006a:	701a      	strb	r2, [r3, #0]
*portOdrLow = c;
2000006c:	4a04      	ldr	r2, [pc, #16]	; (20000080 <graphic_ctrl_bit_set+0x58>)
2000006e:	230f      	movs	r3, #15
20000070:	18fb      	adds	r3, r7, r3
20000072:	781b      	ldrb	r3, [r3, #0]
20000074:	7013      	strb	r3, [r2, #0]
}
20000076:	46c0      	nop			; (mov r8, r8)
20000078:	46bd      	mov	sp, r7
2000007a:	b004      	add	sp, #16
2000007c:	bd80      	pop	{r7, pc}
2000007e:	46c0      	nop			; (mov r8, r8)
20000080:	40021014 	andmi	r1, r2, r4, lsl r0

20000084 <graphic_ctrl_bit_clear>:
static void graphic_ctrl_bit_clear(uint8_t x) {
20000084:	b580      	push	{r7, lr}
20000086:	b084      	sub	sp, #16
20000088:	af00      	add	r7, sp, #0
2000008a:	0002      	movs	r2, r0
2000008c:	1dfb      	adds	r3, r7, #7
2000008e:	701a      	strb	r2, [r3, #0]
uint8_t c;
c = *portOdrLow;
20000090:	4a11      	ldr	r2, [pc, #68]	; (200000d8 <graphic_ctrl_bit_clear+0x54>)
20000092:	230f      	movs	r3, #15
20000094:	18fb      	adds	r3, r7, r3
20000096:	7812      	ldrb	r2, [r2, #0]
20000098:	701a      	strb	r2, [r3, #0]
c &= ~B_SELECT;
2000009a:	230f      	movs	r3, #15
2000009c:	18fb      	adds	r3, r7, r3
2000009e:	220f      	movs	r2, #15
200000a0:	18ba      	adds	r2, r7, r2
200000a2:	7812      	ldrb	r2, [r2, #0]
200000a4:	2104      	movs	r1, #4
200000a6:	438a      	bics	r2, r1
200000a8:	701a      	strb	r2, [r3, #0]
c &= ~x;
200000aa:	1dfb      	adds	r3, r7, #7
200000ac:	781b      	ldrb	r3, [r3, #0]
200000ae:	b25b      	sxtb	r3, r3
200000b0:	43db      	mvns	r3, r3
200000b2:	b25b      	sxtb	r3, r3
200000b4:	220f      	movs	r2, #15
200000b6:	18ba      	adds	r2, r7, r2
200000b8:	7812      	ldrb	r2, [r2, #0]
200000ba:	b252      	sxtb	r2, r2
200000bc:	4013      	ands	r3, r2
200000be:	b25a      	sxtb	r2, r3
200000c0:	230f      	movs	r3, #15
200000c2:	18fb      	adds	r3, r7, r3
200000c4:	701a      	strb	r2, [r3, #0]
*portOdrLow = c;
200000c6:	4a04      	ldr	r2, [pc, #16]	; (200000d8 <graphic_ctrl_bit_clear+0x54>)
200000c8:	230f      	movs	r3, #15
200000ca:	18fb      	adds	r3, r7, r3
200000cc:	781b      	ldrb	r3, [r3, #0]
200000ce:	7013      	strb	r3, [r2, #0]
}
200000d0:	46c0      	nop			; (mov r8, r8)
200000d2:	46bd      	mov	sp, r7
200000d4:	b004      	add	sp, #16
200000d6:	bd80      	pop	{r7, pc}
200000d8:	40021014 	andmi	r1, r2, r4, lsl r0

200000dc <select_controller>:
static void select_controller(uint8_t controller){
200000dc:	b580      	push	{r7, lr}
200000de:	b082      	sub	sp, #8
200000e0:	af00      	add	r7, sp, #0
200000e2:	0002      	movs	r2, r0
200000e4:	1dfb      	adds	r3, r7, #7
200000e6:	701a      	strb	r2, [r3, #0]
	switch(controller){
200000e8:	1dfb      	adds	r3, r7, #7
200000ea:	781b      	ldrb	r3, [r3, #0]
200000ec:	2b08      	cmp	r3, #8
200000ee:	d00c      	beq.n	2000010a <select_controller+0x2e>
200000f0:	dc02      	bgt.n	200000f8 <select_controller+0x1c>
200000f2:	2b00      	cmp	r3, #0
200000f4:	d005      	beq.n	20000102 <select_controller+0x26>
			break;
		case B_CS1|B_CS2 :
			graphic_ctrl_bit_set(B_CS1|B_CS2);
			break;
	}
}
200000f6:	e01a      	b.n	2000012e <select_controller+0x52>
	switch(controller){
200000f8:	2b10      	cmp	r3, #16
200000fa:	d00d      	beq.n	20000118 <select_controller+0x3c>
200000fc:	2b18      	cmp	r3, #24
200000fe:	d012      	beq.n	20000126 <select_controller+0x4a>
}
20000100:	e015      	b.n	2000012e <select_controller+0x52>
			graphic_ctrl_bit_clear(B_CS1|B_CS2);
20000102:	2018      	movs	r0, #24
20000104:	f7ff ffbe 	bl	20000084 <graphic_ctrl_bit_clear>
			break;
20000108:	e011      	b.n	2000012e <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1);
2000010a:	2008      	movs	r0, #8
2000010c:	f7ff ff8c 	bl	20000028 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS2);
20000110:	2010      	movs	r0, #16
20000112:	f7ff ffb7 	bl	20000084 <graphic_ctrl_bit_clear>
			break;
20000116:	e00a      	b.n	2000012e <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS2);
20000118:	2010      	movs	r0, #16
2000011a:	f7ff ff85 	bl	20000028 <graphic_ctrl_bit_set>
			graphic_ctrl_bit_clear(B_CS1);
2000011e:	2008      	movs	r0, #8
20000120:	f7ff ffb0 	bl	20000084 <graphic_ctrl_bit_clear>
			break;
20000124:	e003      	b.n	2000012e <select_controller+0x52>
			graphic_ctrl_bit_set(B_CS1|B_CS2);
20000126:	2018      	movs	r0, #24
20000128:	f7ff ff7e 	bl	20000028 <graphic_ctrl_bit_set>
			break;
2000012c:	46c0      	nop			; (mov r8, r8)
}
2000012e:	46c0      	nop			; (mov r8, r8)
20000130:	46bd      	mov	sp, r7
20000132:	b002      	add	sp, #8
20000134:	bd80      	pop	{r7, pc}

20000136 <graphic_initialize>:
void graphic_initialize(void) {
20000136:	b580      	push	{r7, lr}
20000138:	af00      	add	r7, sp, #0
	graphic_ctrl_bit_set(B_E);
2000013a:	2040      	movs	r0, #64	; 0x40
2000013c:	f7ff ff74 	bl	20000028 <graphic_ctrl_bit_set>
	delay_mikro(10);
20000140:	200a      	movs	r0, #10
20000142:	f000 fb08 	bl	20000756 <delay_mikro>
	graphic_ctrl_bit_clear(B_CS1|B_CS2|B_RST|B_E);
20000146:	2078      	movs	r0, #120	; 0x78
20000148:	f7ff ff9c 	bl	20000084 <graphic_ctrl_bit_clear>
	delay_milli(30);
2000014c:	201e      	movs	r0, #30
2000014e:	f000 fb1c 	bl	2000078a <delay_milli>
	graphic_ctrl_bit_set(B_RST);
20000152:	2020      	movs	r0, #32
20000154:	f7ff ff68 	bl	20000028 <graphic_ctrl_bit_set>
	delay_milli(100);
20000158:	2064      	movs	r0, #100	; 0x64
2000015a:	f000 fb16 	bl	2000078a <delay_milli>
	graphic_write_command(LCD_OFF, B_CS1|B_CS2);
2000015e:	2118      	movs	r1, #24
20000160:	203e      	movs	r0, #62	; 0x3e
20000162:	f000 f8e3 	bl	2000032c <graphic_write_command>
	graphic_write_command(LCD_ON, B_CS1|B_CS2);
20000166:	2118      	movs	r1, #24
20000168:	203f      	movs	r0, #63	; 0x3f
2000016a:	f000 f8df 	bl	2000032c <graphic_write_command>
	graphic_write_command(LCD_DISP_START, B_CS1|B_CS2);
2000016e:	2118      	movs	r1, #24
20000170:	20c0      	movs	r0, #192	; 0xc0
20000172:	f000 f8db 	bl	2000032c <graphic_write_command>
	graphic_write_command(LCD_SET_ADD, B_CS1|B_CS2);
20000176:	2118      	movs	r1, #24
20000178:	2040      	movs	r0, #64	; 0x40
2000017a:	f000 f8d7 	bl	2000032c <graphic_write_command>
	graphic_write_command(LCD_SET_PAGE, B_CS1|B_CS2);
2000017e:	2118      	movs	r1, #24
20000180:	20b8      	movs	r0, #184	; 0xb8
20000182:	f000 f8d3 	bl	2000032c <graphic_write_command>
	select_controller(0);
20000186:	2000      	movs	r0, #0
20000188:	f7ff ffa8 	bl	200000dc <select_controller>
}
2000018c:	46c0      	nop			; (mov r8, r8)
2000018e:	46bd      	mov	sp, r7
20000190:	bd80      	pop	{r7, pc}

20000192 <graphic_wait_ready>:
static void graphic_wait_ready(void) {
20000192:	b580      	push	{r7, lr}
20000194:	b082      	sub	sp, #8
20000196:	af00      	add	r7, sp, #0
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
20000198:	2040      	movs	r0, #64	; 0x40
2000019a:	f7ff ff73 	bl	20000084 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555; // 15-8 inputs, 7-0 outputs
2000019e:	4b14      	ldr	r3, [pc, #80]	; (200001f0 <graphic_wait_ready+0x5e>)
200001a0:	4a14      	ldr	r2, [pc, #80]	; (200001f4 <graphic_wait_ready+0x62>)
200001a2:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_RS);
200001a4:	2001      	movs	r0, #1
200001a6:	f7ff ff6d 	bl	20000084 <graphic_ctrl_bit_clear>
	graphic_ctrl_bit_set(B_RW);
200001aa:	2002      	movs	r0, #2
200001ac:	f7ff ff3c 	bl	20000028 <graphic_ctrl_bit_set>
	delay_500ns();
200001b0:	f000 fac8 	bl	20000744 <delay_500ns>
	while(1) {
		graphic_ctrl_bit_set(B_E);
200001b4:	2040      	movs	r0, #64	; 0x40
200001b6:	f7ff ff37 	bl	20000028 <graphic_ctrl_bit_set>
		delay_500ns();
200001ba:	f000 fac3 	bl	20000744 <delay_500ns>
		c = *portIdrHigh & LCD_BUSY;
200001be:	4b0e      	ldr	r3, [pc, #56]	; (200001f8 <graphic_wait_ready+0x66>)
200001c0:	781b      	ldrb	r3, [r3, #0]
200001c2:	b2da      	uxtb	r2, r3
200001c4:	1dfb      	adds	r3, r7, #7
200001c6:	217f      	movs	r1, #127	; 0x7f
200001c8:	438a      	bics	r2, r1
200001ca:	701a      	strb	r2, [r3, #0]
		graphic_ctrl_bit_clear(B_E);
200001cc:	2040      	movs	r0, #64	; 0x40
200001ce:	f7ff ff59 	bl	20000084 <graphic_ctrl_bit_clear>
		delay_500ns();
200001d2:	f000 fab7 	bl	20000744 <delay_500ns>
		if( c == 0 ) break;
200001d6:	1dfb      	adds	r3, r7, #7
200001d8:	781b      	ldrb	r3, [r3, #0]
200001da:	2b00      	cmp	r3, #0
200001dc:	d000      	beq.n	200001e0 <graphic_wait_ready+0x4e>
		graphic_ctrl_bit_set(B_E);
200001de:	e7e9      	b.n	200001b4 <graphic_wait_ready+0x22>
		if( c == 0 ) break;
200001e0:	46c0      	nop			; (mov r8, r8)
	}
	*portModer = 0x55555555; // 15-0 outputs
200001e2:	4b03      	ldr	r3, [pc, #12]	; (200001f0 <graphic_wait_ready+0x5e>)
200001e4:	4a05      	ldr	r2, [pc, #20]	; (200001fc <graphic_wait_ready+0x6a>)
200001e6:	601a      	str	r2, [r3, #0]
}
200001e8:	46c0      	nop			; (mov r8, r8)
200001ea:	46bd      	mov	sp, r7
200001ec:	b002      	add	sp, #8
200001ee:	bd80      	pop	{r7, pc}
200001f0:	40021000 	andmi	r1, r2, r0
200001f4:	00005555 	andeq	r5, r0, r5, asr r5
200001f8:	40021011 	andmi	r1, r2, r1, lsl r0
200001fc:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000200 <graphic_read>:
static uint8_t graphic_read(uint8_t controller) {
20000200:	b580      	push	{r7, lr}
20000202:	b084      	sub	sp, #16
20000204:	af00      	add	r7, sp, #0
20000206:	0002      	movs	r2, r0
20000208:	1dfb      	adds	r3, r7, #7
2000020a:	701a      	strb	r2, [r3, #0]
	uint8_t c;
	graphic_ctrl_bit_clear(B_E);
2000020c:	2040      	movs	r0, #64	; 0x40
2000020e:	f7ff ff39 	bl	20000084 <graphic_ctrl_bit_clear>
	*portModer = 0x00005555; // 15-8 inputs, 7-0 outputs
20000212:	4b1c      	ldr	r3, [pc, #112]	; (20000284 <graphic_read+0x84>)
20000214:	4a1c      	ldr	r2, [pc, #112]	; (20000288 <graphic_read+0x88>)
20000216:	601a      	str	r2, [r3, #0]
	graphic_ctrl_bit_set(B_RS|B_RW);
20000218:	2003      	movs	r0, #3
2000021a:	f7ff ff05 	bl	20000028 <graphic_ctrl_bit_set>
	select_controller(controller);
2000021e:	1dfb      	adds	r3, r7, #7
20000220:	781b      	ldrb	r3, [r3, #0]
20000222:	0018      	movs	r0, r3
20000224:	f7ff ff5a 	bl	200000dc <select_controller>
	delay_500ns();
20000228:	f000 fa8c 	bl	20000744 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
2000022c:	2040      	movs	r0, #64	; 0x40
2000022e:	f7ff fefb 	bl	20000028 <graphic_ctrl_bit_set>
	delay_500ns();
20000232:	f000 fa87 	bl	20000744 <delay_500ns>
	c = *portIdrHigh;
20000236:	4a15      	ldr	r2, [pc, #84]	; (2000028c <graphic_read+0x8c>)
20000238:	230f      	movs	r3, #15
2000023a:	18fb      	adds	r3, r7, r3
2000023c:	7812      	ldrb	r2, [r2, #0]
2000023e:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
20000240:	2040      	movs	r0, #64	; 0x40
20000242:	f7ff ff1f 	bl	20000084 <graphic_ctrl_bit_clear>
	*portModer = 0x55555555; // 15-0 outputs
20000246:	4b0f      	ldr	r3, [pc, #60]	; (20000284 <graphic_read+0x84>)
20000248:	4a11      	ldr	r2, [pc, #68]	; (20000290 <graphic_read+0x90>)
2000024a:	601a      	str	r2, [r3, #0]
	if( controller & B_CS1 ) {
2000024c:	1dfb      	adds	r3, r7, #7
2000024e:	781b      	ldrb	r3, [r3, #0]
20000250:	2208      	movs	r2, #8
20000252:	4013      	ands	r3, r2
20000254:	d004      	beq.n	20000260 <graphic_read+0x60>
		select_controller(B_CS1);
20000256:	2008      	movs	r0, #8
20000258:	f7ff ff40 	bl	200000dc <select_controller>
		graphic_wait_ready();
2000025c:	f7ff ff99 	bl	20000192 <graphic_wait_ready>
	}
	if( controller & B_CS2 ) {
20000260:	1dfb      	adds	r3, r7, #7
20000262:	781b      	ldrb	r3, [r3, #0]
20000264:	2210      	movs	r2, #16
20000266:	4013      	ands	r3, r2
20000268:	d004      	beq.n	20000274 <graphic_read+0x74>
		select_controller(B_CS2);
2000026a:	2010      	movs	r0, #16
2000026c:	f7ff ff36 	bl	200000dc <select_controller>
		graphic_wait_ready();
20000270:	f7ff ff8f 	bl	20000192 <graphic_wait_ready>
	}
return c;
20000274:	230f      	movs	r3, #15
20000276:	18fb      	adds	r3, r7, r3
20000278:	781b      	ldrb	r3, [r3, #0]
}
2000027a:	0018      	movs	r0, r3
2000027c:	46bd      	mov	sp, r7
2000027e:	b004      	add	sp, #16
20000280:	bd80      	pop	{r7, pc}
20000282:	46c0      	nop			; (mov r8, r8)
20000284:	40021000 	andmi	r1, r2, r0
20000288:	00005555 	andeq	r5, r0, r5, asr r5
2000028c:	40021011 	andmi	r1, r2, r1, lsl r0
20000290:	55555555 	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab

20000294 <graphic_read_data>:
static uint8_t graphic_read_data(uint8_t controller) {
20000294:	b580      	push	{r7, lr}
20000296:	b082      	sub	sp, #8
20000298:	af00      	add	r7, sp, #0
2000029a:	0002      	movs	r2, r0
2000029c:	1dfb      	adds	r3, r7, #7
2000029e:	701a      	strb	r2, [r3, #0]
graphic_read(controller);
200002a0:	1dfb      	adds	r3, r7, #7
200002a2:	781b      	ldrb	r3, [r3, #0]
200002a4:	0018      	movs	r0, r3
200002a6:	f7ff ffab 	bl	20000200 <graphic_read>
return graphic_read(controller);
200002aa:	1dfb      	adds	r3, r7, #7
200002ac:	781b      	ldrb	r3, [r3, #0]
200002ae:	0018      	movs	r0, r3
200002b0:	f7ff ffa6 	bl	20000200 <graphic_read>
200002b4:	0003      	movs	r3, r0
}
200002b6:	0018      	movs	r0, r3
200002b8:	46bd      	mov	sp, r7
200002ba:	b002      	add	sp, #8
200002bc:	bd80      	pop	{r7, pc}

200002be <graphic_write>:
static void graphic_write(uint8_t value, uint8_t controller) {
200002be:	b580      	push	{r7, lr}
200002c0:	b082      	sub	sp, #8
200002c2:	af00      	add	r7, sp, #0
200002c4:	0002      	movs	r2, r0
200002c6:	1dfb      	adds	r3, r7, #7
200002c8:	701a      	strb	r2, [r3, #0]
200002ca:	1dbb      	adds	r3, r7, #6
200002cc:	1c0a      	adds	r2, r1, #0
200002ce:	701a      	strb	r2, [r3, #0]
	*portOdrHigh = value;
200002d0:	4a15      	ldr	r2, [pc, #84]	; (20000328 <graphic_write+0x6a>)
200002d2:	1dfb      	adds	r3, r7, #7
200002d4:	781b      	ldrb	r3, [r3, #0]
200002d6:	7013      	strb	r3, [r2, #0]
	select_controller(controller);
200002d8:	1dbb      	adds	r3, r7, #6
200002da:	781b      	ldrb	r3, [r3, #0]
200002dc:	0018      	movs	r0, r3
200002de:	f7ff fefd 	bl	200000dc <select_controller>
	delay_500ns();
200002e2:	f000 fa2f 	bl	20000744 <delay_500ns>
	graphic_ctrl_bit_set(B_E);
200002e6:	2040      	movs	r0, #64	; 0x40
200002e8:	f7ff fe9e 	bl	20000028 <graphic_ctrl_bit_set>
	delay_500ns();
200002ec:	f000 fa2a 	bl	20000744 <delay_500ns>
	graphic_ctrl_bit_clear( B_E );
200002f0:	2040      	movs	r0, #64	; 0x40
200002f2:	f7ff fec7 	bl	20000084 <graphic_ctrl_bit_clear>
	if(controller & B_CS1) {
200002f6:	1dbb      	adds	r3, r7, #6
200002f8:	781b      	ldrb	r3, [r3, #0]
200002fa:	2208      	movs	r2, #8
200002fc:	4013      	ands	r3, r2
200002fe:	d004      	beq.n	2000030a <graphic_write+0x4c>
		select_controller( B_CS1);
20000300:	2008      	movs	r0, #8
20000302:	f7ff feeb 	bl	200000dc <select_controller>
		graphic_wait_ready();
20000306:	f7ff ff44 	bl	20000192 <graphic_wait_ready>
	}
	if(controller & B_CS2) {
2000030a:	1dbb      	adds	r3, r7, #6
2000030c:	781b      	ldrb	r3, [r3, #0]
2000030e:	2210      	movs	r2, #16
20000310:	4013      	ands	r3, r2
20000312:	d004      	beq.n	2000031e <graphic_write+0x60>
		select_controller( B_CS2);
20000314:	2010      	movs	r0, #16
20000316:	f7ff fee1 	bl	200000dc <select_controller>
		graphic_wait_ready();
2000031a:	f7ff ff3a 	bl	20000192 <graphic_wait_ready>
	}
}
2000031e:	46c0      	nop			; (mov r8, r8)
20000320:	46bd      	mov	sp, r7
20000322:	b002      	add	sp, #8
20000324:	bd80      	pop	{r7, pc}
20000326:	46c0      	nop			; (mov r8, r8)
20000328:	40021015 	andmi	r1, r2, r5, lsl r0

2000032c <graphic_write_command>:
static void graphic_write_command(uint8_t command, uint8_t controller) {
2000032c:	b580      	push	{r7, lr}
2000032e:	b082      	sub	sp, #8
20000330:	af00      	add	r7, sp, #0
20000332:	0002      	movs	r2, r0
20000334:	1dfb      	adds	r3, r7, #7
20000336:	701a      	strb	r2, [r3, #0]
20000338:	1dbb      	adds	r3, r7, #6
2000033a:	1c0a      	adds	r2, r1, #0
2000033c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000033e:	2040      	movs	r0, #64	; 0x40
20000340:	f7ff fea0 	bl	20000084 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000344:	1dbb      	adds	r3, r7, #6
20000346:	781b      	ldrb	r3, [r3, #0]
20000348:	0018      	movs	r0, r3
2000034a:	f7ff fec7 	bl	200000dc <select_controller>
	graphic_ctrl_bit_clear(B_RS|B_RW);
2000034e:	2003      	movs	r0, #3
20000350:	f7ff fe98 	bl	20000084 <graphic_ctrl_bit_clear>
	graphic_write(command, controller);
20000354:	1dbb      	adds	r3, r7, #6
20000356:	781a      	ldrb	r2, [r3, #0]
20000358:	1dfb      	adds	r3, r7, #7
2000035a:	781b      	ldrb	r3, [r3, #0]
2000035c:	0011      	movs	r1, r2
2000035e:	0018      	movs	r0, r3
20000360:	f7ff ffad 	bl	200002be <graphic_write>
}
20000364:	46c0      	nop			; (mov r8, r8)
20000366:	46bd      	mov	sp, r7
20000368:	b002      	add	sp, #8
2000036a:	bd80      	pop	{r7, pc}

2000036c <graphic_write_data>:
static void graphic_write_data(uint8_t data, uint8_t controller) {
2000036c:	b580      	push	{r7, lr}
2000036e:	b082      	sub	sp, #8
20000370:	af00      	add	r7, sp, #0
20000372:	0002      	movs	r2, r0
20000374:	1dfb      	adds	r3, r7, #7
20000376:	701a      	strb	r2, [r3, #0]
20000378:	1dbb      	adds	r3, r7, #6
2000037a:	1c0a      	adds	r2, r1, #0
2000037c:	701a      	strb	r2, [r3, #0]
	graphic_ctrl_bit_clear(B_E);
2000037e:	2040      	movs	r0, #64	; 0x40
20000380:	f7ff fe80 	bl	20000084 <graphic_ctrl_bit_clear>
	select_controller(controller);
20000384:	1dbb      	adds	r3, r7, #6
20000386:	781b      	ldrb	r3, [r3, #0]
20000388:	0018      	movs	r0, r3
2000038a:	f7ff fea7 	bl	200000dc <select_controller>
	graphic_ctrl_bit_set(B_RS);
2000038e:	2001      	movs	r0, #1
20000390:	f7ff fe4a 	bl	20000028 <graphic_ctrl_bit_set>
	graphic_ctrl_bit_clear(B_RW);
20000394:	2002      	movs	r0, #2
20000396:	f7ff fe75 	bl	20000084 <graphic_ctrl_bit_clear>
	graphic_write(data, controller);
2000039a:	1dbb      	adds	r3, r7, #6
2000039c:	781a      	ldrb	r2, [r3, #0]
2000039e:	1dfb      	adds	r3, r7, #7
200003a0:	781b      	ldrb	r3, [r3, #0]
200003a2:	0011      	movs	r1, r2
200003a4:	0018      	movs	r0, r3
200003a6:	f7ff ff8a 	bl	200002be <graphic_write>
}
200003aa:	46c0      	nop			; (mov r8, r8)
200003ac:	46bd      	mov	sp, r7
200003ae:	b002      	add	sp, #8
200003b0:	bd80      	pop	{r7, pc}

200003b2 <graphic_clear_screen>:
void graphic_clear_screen(void) {
200003b2:	b580      	push	{r7, lr}
200003b4:	b082      	sub	sp, #8
200003b6:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for(j = 0; j < 8; j++) {
200003b8:	1dbb      	adds	r3, r7, #6
200003ba:	2200      	movs	r2, #0
200003bc:	701a      	strb	r2, [r3, #0]
200003be:	e023      	b.n	20000408 <graphic_clear_screen+0x56>
		graphic_write_command(LCD_SET_PAGE | j, B_CS1|B_CS2);
200003c0:	1dbb      	adds	r3, r7, #6
200003c2:	781b      	ldrb	r3, [r3, #0]
200003c4:	2248      	movs	r2, #72	; 0x48
200003c6:	4252      	negs	r2, r2
200003c8:	4313      	orrs	r3, r2
200003ca:	b2db      	uxtb	r3, r3
200003cc:	2118      	movs	r1, #24
200003ce:	0018      	movs	r0, r3
200003d0:	f7ff ffac 	bl	2000032c <graphic_write_command>
		graphic_write_command(LCD_SET_ADD | 0, B_CS1|B_CS2);
200003d4:	2118      	movs	r1, #24
200003d6:	2040      	movs	r0, #64	; 0x40
200003d8:	f7ff ffa8 	bl	2000032c <graphic_write_command>
		for(i = 0; i <= 63; i++){
200003dc:	1dfb      	adds	r3, r7, #7
200003de:	2200      	movs	r2, #0
200003e0:	701a      	strb	r2, [r3, #0]
200003e2:	e008      	b.n	200003f6 <graphic_clear_screen+0x44>
			graphic_write_data(0, B_CS1|B_CS2);
200003e4:	2118      	movs	r1, #24
200003e6:	2000      	movs	r0, #0
200003e8:	f7ff ffc0 	bl	2000036c <graphic_write_data>
		for(i = 0; i <= 63; i++){
200003ec:	1dfb      	adds	r3, r7, #7
200003ee:	781a      	ldrb	r2, [r3, #0]
200003f0:	1dfb      	adds	r3, r7, #7
200003f2:	3201      	adds	r2, #1
200003f4:	701a      	strb	r2, [r3, #0]
200003f6:	1dfb      	adds	r3, r7, #7
200003f8:	781b      	ldrb	r3, [r3, #0]
200003fa:	2b3f      	cmp	r3, #63	; 0x3f
200003fc:	d9f2      	bls.n	200003e4 <graphic_clear_screen+0x32>
	for(j = 0; j < 8; j++) {
200003fe:	1dbb      	adds	r3, r7, #6
20000400:	781a      	ldrb	r2, [r3, #0]
20000402:	1dbb      	adds	r3, r7, #6
20000404:	3201      	adds	r2, #1
20000406:	701a      	strb	r2, [r3, #0]
20000408:	1dbb      	adds	r3, r7, #6
2000040a:	781b      	ldrb	r3, [r3, #0]
2000040c:	2b07      	cmp	r3, #7
2000040e:	d9d7      	bls.n	200003c0 <graphic_clear_screen+0xe>
		}
	}
}
20000410:	46c0      	nop			; (mov r8, r8)
20000412:	46bd      	mov	sp, r7
20000414:	b002      	add	sp, #8
20000416:	bd80      	pop	{r7, pc}

20000418 <pixel>:

void pixel(int x, int y, int set) {
20000418:	b590      	push	{r4, r7, lr}
2000041a:	b089      	sub	sp, #36	; 0x24
2000041c:	af00      	add	r7, sp, #0
2000041e:	60f8      	str	r0, [r7, #12]
20000420:	60b9      	str	r1, [r7, #8]
20000422:	607a      	str	r2, [r7, #4]
	uint8_t mask, c, controller;
	int index;
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
20000424:	68fb      	ldr	r3, [r7, #12]
20000426:	2b00      	cmp	r3, #0
20000428:	dc00      	bgt.n	2000042c <pixel+0x14>
2000042a:	e0bc      	b.n	200005a6 <pixel+0x18e>
2000042c:	68bb      	ldr	r3, [r7, #8]
2000042e:	2b00      	cmp	r3, #0
20000430:	dc00      	bgt.n	20000434 <pixel+0x1c>
20000432:	e0b8      	b.n	200005a6 <pixel+0x18e>
20000434:	68fb      	ldr	r3, [r7, #12]
20000436:	2b80      	cmp	r3, #128	; 0x80
20000438:	dd00      	ble.n	2000043c <pixel+0x24>
2000043a:	e0b4      	b.n	200005a6 <pixel+0x18e>
2000043c:	68bb      	ldr	r3, [r7, #8]
2000043e:	2b40      	cmp	r3, #64	; 0x40
20000440:	dd00      	ble.n	20000444 <pixel+0x2c>
20000442:	e0b0      	b.n	200005a6 <pixel+0x18e>
	index = (y-1)/8;
20000444:	68bb      	ldr	r3, [r7, #8]
20000446:	3b01      	subs	r3, #1
20000448:	2b00      	cmp	r3, #0
2000044a:	da00      	bge.n	2000044e <pixel+0x36>
2000044c:	3307      	adds	r3, #7
2000044e:	10db      	asrs	r3, r3, #3
20000450:	61bb      	str	r3, [r7, #24]
	switch( (y-1)%8 ) {
20000452:	68bb      	ldr	r3, [r7, #8]
20000454:	3b01      	subs	r3, #1
20000456:	4a56      	ldr	r2, [pc, #344]	; (200005b0 <pixel+0x198>)
20000458:	4013      	ands	r3, r2
2000045a:	d504      	bpl.n	20000466 <pixel+0x4e>
2000045c:	3b01      	subs	r3, #1
2000045e:	2208      	movs	r2, #8
20000460:	4252      	negs	r2, r2
20000462:	4313      	orrs	r3, r2
20000464:	3301      	adds	r3, #1
20000466:	2b07      	cmp	r3, #7
20000468:	d82c      	bhi.n	200004c4 <pixel+0xac>
2000046a:	009a      	lsls	r2, r3, #2
2000046c:	4b51      	ldr	r3, [pc, #324]	; (200005b4 <pixel+0x19c>)
2000046e:	18d3      	adds	r3, r2, r3
20000470:	681b      	ldr	r3, [r3, #0]
20000472:	469f      	mov	pc, r3
		case 0: mask = 1; break;
20000474:	231f      	movs	r3, #31
20000476:	18fb      	adds	r3, r7, r3
20000478:	2201      	movs	r2, #1
2000047a:	701a      	strb	r2, [r3, #0]
2000047c:	e022      	b.n	200004c4 <pixel+0xac>
		case 1: mask = 2; break;
2000047e:	231f      	movs	r3, #31
20000480:	18fb      	adds	r3, r7, r3
20000482:	2202      	movs	r2, #2
20000484:	701a      	strb	r2, [r3, #0]
20000486:	e01d      	b.n	200004c4 <pixel+0xac>
		case 2: mask = 4; break;
20000488:	231f      	movs	r3, #31
2000048a:	18fb      	adds	r3, r7, r3
2000048c:	2204      	movs	r2, #4
2000048e:	701a      	strb	r2, [r3, #0]
20000490:	e018      	b.n	200004c4 <pixel+0xac>
		case 3: mask = 8; break;
20000492:	231f      	movs	r3, #31
20000494:	18fb      	adds	r3, r7, r3
20000496:	2208      	movs	r2, #8
20000498:	701a      	strb	r2, [r3, #0]
2000049a:	e013      	b.n	200004c4 <pixel+0xac>
		case 4: mask = 0x10; break;
2000049c:	231f      	movs	r3, #31
2000049e:	18fb      	adds	r3, r7, r3
200004a0:	2210      	movs	r2, #16
200004a2:	701a      	strb	r2, [r3, #0]
200004a4:	e00e      	b.n	200004c4 <pixel+0xac>
		case 5: mask = 0x20; break;
200004a6:	231f      	movs	r3, #31
200004a8:	18fb      	adds	r3, r7, r3
200004aa:	2220      	movs	r2, #32
200004ac:	701a      	strb	r2, [r3, #0]
200004ae:	e009      	b.n	200004c4 <pixel+0xac>
		case 6: mask = 0x40; break;
200004b0:	231f      	movs	r3, #31
200004b2:	18fb      	adds	r3, r7, r3
200004b4:	2240      	movs	r2, #64	; 0x40
200004b6:	701a      	strb	r2, [r3, #0]
200004b8:	e004      	b.n	200004c4 <pixel+0xac>
		case 7: mask = 0x80; break;
200004ba:	231f      	movs	r3, #31
200004bc:	18fb      	adds	r3, r7, r3
200004be:	2280      	movs	r2, #128	; 0x80
200004c0:	701a      	strb	r2, [r3, #0]
200004c2:	46c0      	nop			; (mov r8, r8)
	}
		if(set == 0)
200004c4:	687b      	ldr	r3, [r7, #4]
200004c6:	2b00      	cmp	r3, #0
200004c8:	d106      	bne.n	200004d8 <pixel+0xc0>
			mask = ~mask;
200004ca:	231f      	movs	r3, #31
200004cc:	18fb      	adds	r3, r7, r3
200004ce:	221f      	movs	r2, #31
200004d0:	18ba      	adds	r2, r7, r2
200004d2:	7812      	ldrb	r2, [r2, #0]
200004d4:	43d2      	mvns	r2, r2
200004d6:	701a      	strb	r2, [r3, #0]
		if(x > 64){
200004d8:	68fb      	ldr	r3, [r7, #12]
200004da:	2b40      	cmp	r3, #64	; 0x40
200004dc:	dd07      	ble.n	200004ee <pixel+0xd6>
			controller = B_CS2;
200004de:	231e      	movs	r3, #30
200004e0:	18fb      	adds	r3, r7, r3
200004e2:	2210      	movs	r2, #16
200004e4:	701a      	strb	r2, [r3, #0]
		x = x - 65;
200004e6:	68fb      	ldr	r3, [r7, #12]
200004e8:	3b41      	subs	r3, #65	; 0x41
200004ea:	60fb      	str	r3, [r7, #12]
200004ec:	e006      	b.n	200004fc <pixel+0xe4>
		} 
		else {
		controller = B_CS1;
200004ee:	231e      	movs	r3, #30
200004f0:	18fb      	adds	r3, r7, r3
200004f2:	2208      	movs	r2, #8
200004f4:	701a      	strb	r2, [r3, #0]
		x = x-1;
200004f6:	68fb      	ldr	r3, [r7, #12]
200004f8:	3b01      	subs	r3, #1
200004fa:	60fb      	str	r3, [r7, #12]
		}
		graphic_write_command(LCD_SET_ADD | x, controller );
200004fc:	68fb      	ldr	r3, [r7, #12]
200004fe:	b25b      	sxtb	r3, r3
20000500:	2240      	movs	r2, #64	; 0x40
20000502:	4313      	orrs	r3, r2
20000504:	b25b      	sxtb	r3, r3
20000506:	b2da      	uxtb	r2, r3
20000508:	231e      	movs	r3, #30
2000050a:	18fb      	adds	r3, r7, r3
2000050c:	781b      	ldrb	r3, [r3, #0]
2000050e:	0019      	movs	r1, r3
20000510:	0010      	movs	r0, r2
20000512:	f7ff ff0b 	bl	2000032c <graphic_write_command>
		graphic_write_command(LCD_SET_PAGE | index, controller );
20000516:	69bb      	ldr	r3, [r7, #24]
20000518:	b25b      	sxtb	r3, r3
2000051a:	2248      	movs	r2, #72	; 0x48
2000051c:	4252      	negs	r2, r2
2000051e:	4313      	orrs	r3, r2
20000520:	b25b      	sxtb	r3, r3
20000522:	b2da      	uxtb	r2, r3
20000524:	231e      	movs	r3, #30
20000526:	18fb      	adds	r3, r7, r3
20000528:	781b      	ldrb	r3, [r3, #0]
2000052a:	0019      	movs	r1, r3
2000052c:	0010      	movs	r0, r2
2000052e:	f7ff fefd 	bl	2000032c <graphic_write_command>
		c = graphic_read_data(controller);
20000532:	2317      	movs	r3, #23
20000534:	18fc      	adds	r4, r7, r3
20000536:	231e      	movs	r3, #30
20000538:	18fb      	adds	r3, r7, r3
2000053a:	781b      	ldrb	r3, [r3, #0]
2000053c:	0018      	movs	r0, r3
2000053e:	f7ff fea9 	bl	20000294 <graphic_read_data>
20000542:	0003      	movs	r3, r0
20000544:	7023      	strb	r3, [r4, #0]
		graphic_write_command(LCD_SET_ADD | x, controller);
20000546:	68fb      	ldr	r3, [r7, #12]
20000548:	b25b      	sxtb	r3, r3
2000054a:	2240      	movs	r2, #64	; 0x40
2000054c:	4313      	orrs	r3, r2
2000054e:	b25b      	sxtb	r3, r3
20000550:	b2da      	uxtb	r2, r3
20000552:	231e      	movs	r3, #30
20000554:	18fb      	adds	r3, r7, r3
20000556:	781b      	ldrb	r3, [r3, #0]
20000558:	0019      	movs	r1, r3
2000055a:	0010      	movs	r0, r2
2000055c:	f7ff fee6 	bl	2000032c <graphic_write_command>
		if(set)
20000560:	687b      	ldr	r3, [r7, #4]
20000562:	2b00      	cmp	r3, #0
20000564:	d00a      	beq.n	2000057c <pixel+0x164>
			mask = mask | c;
20000566:	231f      	movs	r3, #31
20000568:	18fb      	adds	r3, r7, r3
2000056a:	221f      	movs	r2, #31
2000056c:	18b9      	adds	r1, r7, r2
2000056e:	2217      	movs	r2, #23
20000570:	18ba      	adds	r2, r7, r2
20000572:	7809      	ldrb	r1, [r1, #0]
20000574:	7812      	ldrb	r2, [r2, #0]
20000576:	430a      	orrs	r2, r1
20000578:	701a      	strb	r2, [r3, #0]
2000057a:	e009      	b.n	20000590 <pixel+0x178>
		else
			mask = mask & c;
2000057c:	231f      	movs	r3, #31
2000057e:	18fb      	adds	r3, r7, r3
20000580:	221f      	movs	r2, #31
20000582:	18ba      	adds	r2, r7, r2
20000584:	2117      	movs	r1, #23
20000586:	1879      	adds	r1, r7, r1
20000588:	7812      	ldrb	r2, [r2, #0]
2000058a:	7809      	ldrb	r1, [r1, #0]
2000058c:	400a      	ands	r2, r1
2000058e:	701a      	strb	r2, [r3, #0]
		graphic_write_data(mask, controller);
20000590:	231e      	movs	r3, #30
20000592:	18fb      	adds	r3, r7, r3
20000594:	781a      	ldrb	r2, [r3, #0]
20000596:	231f      	movs	r3, #31
20000598:	18fb      	adds	r3, r7, r3
2000059a:	781b      	ldrb	r3, [r3, #0]
2000059c:	0011      	movs	r1, r2
2000059e:	0018      	movs	r0, r3
200005a0:	f7ff fee4 	bl	2000036c <graphic_write_data>
200005a4:	e000      	b.n	200005a8 <pixel+0x190>
	if((x < 1) || (y < 1) || (x > 128) || (y > 64)) return;
200005a6:	46c0      	nop			; (mov r8, r8)
}
200005a8:	46bd      	mov	sp, r7
200005aa:	b009      	add	sp, #36	; 0x24
200005ac:	bd90      	pop	{r4, r7, pc}
200005ae:	46c0      	nop			; (mov r8, r8)
200005b0:	80000007 	andhi	r0, r0, r7
200005b4:	20000830 	andcs	r0, r0, r0, lsr r8

200005b8 <set_object_speed>:

void set_object_speed(POBJECT O, int speedx, int speedy){
200005b8:	b580      	push	{r7, lr}
200005ba:	b084      	sub	sp, #16
200005bc:	af00      	add	r7, sp, #0
200005be:	60f8      	str	r0, [r7, #12]
200005c0:	60b9      	str	r1, [r7, #8]
200005c2:	607a      	str	r2, [r7, #4]
	O->dirx = speedx;
200005c4:	68fb      	ldr	r3, [r7, #12]
200005c6:	68ba      	ldr	r2, [r7, #8]
200005c8:	605a      	str	r2, [r3, #4]
	O->diry = speedy;
200005ca:	68fb      	ldr	r3, [r7, #12]
200005cc:	687a      	ldr	r2, [r7, #4]
200005ce:	609a      	str	r2, [r3, #8]
}
200005d0:	46c0      	nop			; (mov r8, r8)
200005d2:	46bd      	mov	sp, r7
200005d4:	b004      	add	sp, #16
200005d6:	bd80      	pop	{r7, pc}

200005d8 <draw_object>:
void draw_object(POBJECT O){
200005d8:	b580      	push	{r7, lr}
200005da:	b084      	sub	sp, #16
200005dc:	af00      	add	r7, sp, #0
200005de:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS ;i++){
200005e0:	2300      	movs	r3, #0
200005e2:	60fb      	str	r3, [r7, #12]
200005e4:	e01c      	b.n	20000620 <draw_object+0x48>
		pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 1);
200005e6:	687b      	ldr	r3, [r7, #4]
200005e8:	68da      	ldr	r2, [r3, #12]
200005ea:	687b      	ldr	r3, [r7, #4]
200005ec:	6819      	ldr	r1, [r3, #0]
200005ee:	68fb      	ldr	r3, [r7, #12]
200005f0:	3304      	adds	r3, #4
200005f2:	005b      	lsls	r3, r3, #1
200005f4:	18cb      	adds	r3, r1, r3
200005f6:	3304      	adds	r3, #4
200005f8:	781b      	ldrb	r3, [r3, #0]
200005fa:	18d0      	adds	r0, r2, r3
200005fc:	687b      	ldr	r3, [r7, #4]
200005fe:	691a      	ldr	r2, [r3, #16]
20000600:	687b      	ldr	r3, [r7, #4]
20000602:	6819      	ldr	r1, [r3, #0]
20000604:	68fb      	ldr	r3, [r7, #12]
20000606:	3304      	adds	r3, #4
20000608:	005b      	lsls	r3, r3, #1
2000060a:	18cb      	adds	r3, r1, r3
2000060c:	3305      	adds	r3, #5
2000060e:	781b      	ldrb	r3, [r3, #0]
20000610:	18d3      	adds	r3, r2, r3
20000612:	2201      	movs	r2, #1
20000614:	0019      	movs	r1, r3
20000616:	f7ff feff 	bl	20000418 <pixel>
	for(int i = 0; i < MAX_POINTS ;i++){
2000061a:	68fb      	ldr	r3, [r7, #12]
2000061c:	3301      	adds	r3, #1
2000061e:	60fb      	str	r3, [r7, #12]
20000620:	68fb      	ldr	r3, [r7, #12]
20000622:	2b13      	cmp	r3, #19
20000624:	dddf      	ble.n	200005e6 <draw_object+0xe>
	}
}
20000626:	46c0      	nop			; (mov r8, r8)
20000628:	46bd      	mov	sp, r7
2000062a:	b004      	add	sp, #16
2000062c:	bd80      	pop	{r7, pc}

2000062e <clear_object>:
void clear_object(POBJECT O){
2000062e:	b580      	push	{r7, lr}
20000630:	b084      	sub	sp, #16
20000632:	af00      	add	r7, sp, #0
20000634:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_POINTS; i++){
20000636:	2300      	movs	r3, #0
20000638:	60fb      	str	r3, [r7, #12]
2000063a:	e01c      	b.n	20000676 <clear_object+0x48>
		pixel(O->posx + O->geo->px[i].x, O->posy + O->geo->px[i].y, 0);
2000063c:	687b      	ldr	r3, [r7, #4]
2000063e:	68da      	ldr	r2, [r3, #12]
20000640:	687b      	ldr	r3, [r7, #4]
20000642:	6819      	ldr	r1, [r3, #0]
20000644:	68fb      	ldr	r3, [r7, #12]
20000646:	3304      	adds	r3, #4
20000648:	005b      	lsls	r3, r3, #1
2000064a:	18cb      	adds	r3, r1, r3
2000064c:	3304      	adds	r3, #4
2000064e:	781b      	ldrb	r3, [r3, #0]
20000650:	18d0      	adds	r0, r2, r3
20000652:	687b      	ldr	r3, [r7, #4]
20000654:	691a      	ldr	r2, [r3, #16]
20000656:	687b      	ldr	r3, [r7, #4]
20000658:	6819      	ldr	r1, [r3, #0]
2000065a:	68fb      	ldr	r3, [r7, #12]
2000065c:	3304      	adds	r3, #4
2000065e:	005b      	lsls	r3, r3, #1
20000660:	18cb      	adds	r3, r1, r3
20000662:	3305      	adds	r3, #5
20000664:	781b      	ldrb	r3, [r3, #0]
20000666:	18d3      	adds	r3, r2, r3
20000668:	2200      	movs	r2, #0
2000066a:	0019      	movs	r1, r3
2000066c:	f7ff fed4 	bl	20000418 <pixel>
	for(int i = 0; i < MAX_POINTS; i++){
20000670:	68fb      	ldr	r3, [r7, #12]
20000672:	3301      	adds	r3, #1
20000674:	60fb      	str	r3, [r7, #12]
20000676:	68fb      	ldr	r3, [r7, #12]
20000678:	2b13      	cmp	r3, #19
2000067a:	dddf      	ble.n	2000063c <clear_object+0xe>
	}
}
2000067c:	46c0      	nop			; (mov r8, r8)
2000067e:	46bd      	mov	sp, r7
20000680:	b004      	add	sp, #16
20000682:	bd80      	pop	{r7, pc}

20000684 <move_object>:
void move_object(POBJECT O){
20000684:	b580      	push	{r7, lr}
20000686:	b082      	sub	sp, #8
20000688:	af00      	add	r7, sp, #0
2000068a:	6078      	str	r0, [r7, #4]
	clear_object(O);
2000068c:	687b      	ldr	r3, [r7, #4]
2000068e:	0018      	movs	r0, r3
20000690:	f7ff ffcd 	bl	2000062e <clear_object>
	O->posx += O->dirx;
20000694:	687b      	ldr	r3, [r7, #4]
20000696:	68da      	ldr	r2, [r3, #12]
20000698:	687b      	ldr	r3, [r7, #4]
2000069a:	685b      	ldr	r3, [r3, #4]
2000069c:	18d2      	adds	r2, r2, r3
2000069e:	687b      	ldr	r3, [r7, #4]
200006a0:	60da      	str	r2, [r3, #12]
	O->posy += O->diry;
200006a2:	687b      	ldr	r3, [r7, #4]
200006a4:	691a      	ldr	r2, [r3, #16]
200006a6:	687b      	ldr	r3, [r7, #4]
200006a8:	689b      	ldr	r3, [r3, #8]
200006aa:	18d2      	adds	r2, r2, r3
200006ac:	687b      	ldr	r3, [r7, #4]
200006ae:	611a      	str	r2, [r3, #16]
	if(O->posx < 1 || O->posx > 128){
200006b0:	687b      	ldr	r3, [r7, #4]
200006b2:	68db      	ldr	r3, [r3, #12]
200006b4:	2b00      	cmp	r3, #0
200006b6:	dd03      	ble.n	200006c0 <move_object+0x3c>
200006b8:	687b      	ldr	r3, [r7, #4]
200006ba:	68db      	ldr	r3, [r3, #12]
200006bc:	2b80      	cmp	r3, #128	; 0x80
200006be:	dd05      	ble.n	200006cc <move_object+0x48>
		O->dirx = -(O->dirx);
200006c0:	687b      	ldr	r3, [r7, #4]
200006c2:	685b      	ldr	r3, [r3, #4]
200006c4:	425a      	negs	r2, r3
200006c6:	687b      	ldr	r3, [r7, #4]
200006c8:	605a      	str	r2, [r3, #4]
200006ca:	e011      	b.n	200006f0 <move_object+0x6c>
	}
	else if(O->posy < 1 || O->posy > 128 - O->geo->sizeY){
200006cc:	687b      	ldr	r3, [r7, #4]
200006ce:	691b      	ldr	r3, [r3, #16]
200006d0:	2b00      	cmp	r3, #0
200006d2:	dd08      	ble.n	200006e6 <move_object+0x62>
200006d4:	687b      	ldr	r3, [r7, #4]
200006d6:	691a      	ldr	r2, [r3, #16]
200006d8:	687b      	ldr	r3, [r7, #4]
200006da:	681b      	ldr	r3, [r3, #0]
200006dc:	689b      	ldr	r3, [r3, #8]
200006de:	2180      	movs	r1, #128	; 0x80
200006e0:	1acb      	subs	r3, r1, r3
200006e2:	429a      	cmp	r2, r3
200006e4:	dd04      	ble.n	200006f0 <move_object+0x6c>
		O->diry = -(O->diry);
200006e6:	687b      	ldr	r3, [r7, #4]
200006e8:	689b      	ldr	r3, [r3, #8]
200006ea:	425a      	negs	r2, r3
200006ec:	687b      	ldr	r3, [r7, #4]
200006ee:	609a      	str	r2, [r3, #8]
	}
	draw_object(O);
200006f0:	687b      	ldr	r3, [r7, #4]
200006f2:	0018      	movs	r0, r3
200006f4:	f7ff ff70 	bl	200005d8 <draw_object>
}
200006f8:	46c0      	nop			; (mov r8, r8)
200006fa:	46bd      	mov	sp, r7
200006fc:	b002      	add	sp, #8
200006fe:	bd80      	pop	{r7, pc}

20000700 <delay_250ns>:

//Delay funktioner
void delay_250ns ( void ) {
20000700:	b580      	push	{r7, lr}
20000702:	af00      	add	r7, sp, #0
		*STK_CTRL = 0x00;
20000704:	4b0c      	ldr	r3, [pc, #48]	; (20000738 <delay_250ns+0x38>)
20000706:	2200      	movs	r2, #0
20000708:	601a      	str	r2, [r3, #0]
		*STK_LOAD = ((168/4) - 1);
2000070a:	4b0c      	ldr	r3, [pc, #48]	; (2000073c <delay_250ns+0x3c>)
2000070c:	2229      	movs	r2, #41	; 0x29
2000070e:	601a      	str	r2, [r3, #0]
		*STK_VAL = 0;
20000710:	4b0b      	ldr	r3, [pc, #44]	; (20000740 <delay_250ns+0x40>)
20000712:	2200      	movs	r2, #0
20000714:	601a      	str	r2, [r3, #0]
		*STK_CTRL = 5;
20000716:	4b08      	ldr	r3, [pc, #32]	; (20000738 <delay_250ns+0x38>)
20000718:	2205      	movs	r2, #5
2000071a:	601a      	str	r2, [r3, #0]
		while ((*STK_CTRL & 0x10000) == 0){}
2000071c:	46c0      	nop			; (mov r8, r8)
2000071e:	4b06      	ldr	r3, [pc, #24]	; (20000738 <delay_250ns+0x38>)
20000720:	681a      	ldr	r2, [r3, #0]
20000722:	2380      	movs	r3, #128	; 0x80
20000724:	025b      	lsls	r3, r3, #9
20000726:	4013      	ands	r3, r2
20000728:	d0f9      	beq.n	2000071e <delay_250ns+0x1e>
		*STK_CTRL = 0;
2000072a:	4b03      	ldr	r3, [pc, #12]	; (20000738 <delay_250ns+0x38>)
2000072c:	2200      	movs	r2, #0
2000072e:	601a      	str	r2, [r3, #0]
}
20000730:	46c0      	nop			; (mov r8, r8)
20000732:	46bd      	mov	sp, r7
20000734:	bd80      	pop	{r7, pc}
20000736:	46c0      	nop			; (mov r8, r8)
20000738:	e000e010 	and	lr, r0, r0, lsl r0
2000073c:	e000e014 	and	lr, r0, r4, lsl r0
20000740:	e000e018 	and	lr, r0, r8, lsl r0

20000744 <delay_500ns>:
void delay_500ns(void){
20000744:	b580      	push	{r7, lr}
20000746:	af00      	add	r7, sp, #0
	delay_250ns();
20000748:	f7ff ffda 	bl	20000700 <delay_250ns>
	delay_250ns();
2000074c:	f7ff ffd8 	bl	20000700 <delay_250ns>
}
20000750:	46c0      	nop			; (mov r8, r8)
20000752:	46bd      	mov	sp, r7
20000754:	bd80      	pop	{r7, pc}

20000756 <delay_mikro>:
void delay_mikro (unsigned int us){
20000756:	b580      	push	{r7, lr}
20000758:	b084      	sub	sp, #16
2000075a:	af00      	add	r7, sp, #0
2000075c:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < us; i++) {
2000075e:	2300      	movs	r3, #0
20000760:	60fb      	str	r3, [r7, #12]
20000762:	e00a      	b.n	2000077a <delay_mikro+0x24>
		delay_250ns();
20000764:	f7ff ffcc 	bl	20000700 <delay_250ns>
		delay_250ns();
20000768:	f7ff ffca 	bl	20000700 <delay_250ns>
		delay_250ns();
2000076c:	f7ff ffc8 	bl	20000700 <delay_250ns>
		delay_250ns();
20000770:	f7ff ffc6 	bl	20000700 <delay_250ns>
	for (int i = 0; i < us; i++) {
20000774:	68fb      	ldr	r3, [r7, #12]
20000776:	3301      	adds	r3, #1
20000778:	60fb      	str	r3, [r7, #12]
2000077a:	68fa      	ldr	r2, [r7, #12]
2000077c:	687b      	ldr	r3, [r7, #4]
2000077e:	429a      	cmp	r2, r3
20000780:	d3f0      	bcc.n	20000764 <delay_mikro+0xe>
		}
}	
20000782:	46c0      	nop			; (mov r8, r8)
20000784:	46bd      	mov	sp, r7
20000786:	b004      	add	sp, #16
20000788:	bd80      	pop	{r7, pc}

2000078a <delay_milli>:
void delay_milli (unsigned int ms){
2000078a:	b580      	push	{r7, lr}
2000078c:	b082      	sub	sp, #8
2000078e:	af00      	add	r7, sp, #0
20000790:	6078      	str	r0, [r7, #4]
	#ifdef SIMULATOR
		delay_mikro(ms);
20000792:	687b      	ldr	r3, [r7, #4]
20000794:	0018      	movs	r0, r3
20000796:	f7ff ffde 	bl	20000756 <delay_mikro>
	#else
		delay_mikro(ms * 1000);
	#endif
}
2000079a:	46c0      	nop			; (mov r8, r8)
2000079c:	46bd      	mov	sp, r7
2000079e:	b002      	add	sp, #8
200007a0:	bd80      	pop	{r7, pc}

200007a2 <main>:

void main(void){
200007a2:	b580      	push	{r7, lr}
200007a4:	b082      	sub	sp, #8
200007a6:	af00      	add	r7, sp, #0
	POBJECT p = &ball;
200007a8:	4b0a      	ldr	r3, [pc, #40]	; (200007d4 <main+0x32>)
200007aa:	607b      	str	r3, [r7, #4]
	init_app();
200007ac:	f7ff fc30 	bl	20000010 <init_app>
	graphic_initialize();
200007b0:	f7ff fcc1 	bl	20000136 <graphic_initialize>
	#ifndef SIMULATOR
		graphic_clear_screen();
	#endif
		p->set_speed(p, 4, 2);
200007b4:	687b      	ldr	r3, [r7, #4]
200007b6:	6a1b      	ldr	r3, [r3, #32]
200007b8:	6878      	ldr	r0, [r7, #4]
200007ba:	2202      	movs	r2, #2
200007bc:	2104      	movs	r1, #4
200007be:	4798      	blx	r3
		while(1){
			p->move(p);
200007c0:	687b      	ldr	r3, [r7, #4]
200007c2:	69db      	ldr	r3, [r3, #28]
200007c4:	687a      	ldr	r2, [r7, #4]
200007c6:	0010      	movs	r0, r2
200007c8:	4798      	blx	r3
			delay_milli(40);
200007ca:	2028      	movs	r0, #40	; 0x28
200007cc:	f7ff ffdd 	bl	2000078a <delay_milli>
			p->move(p);
200007d0:	e7f6      	b.n	200007c0 <main+0x1e>
200007d2:	46c0      	nop			; (mov r8, r8)
200007d4:	2000080c 	andcs	r0, r0, ip, lsl #16

200007d8 <ball_geometry>:
200007d8:	0000000c 	andeq	r0, r0, ip
200007dc:	00000004 	andeq	r0, r0, r4
200007e0:	00000004 	andeq	r0, r0, r4
200007e4:	02000100 	andeq	r0, r0, #0, 2
200007e8:	01010001 	tsteq	r1, r1
200007ec:	03010201 	movweq	r0, #4609	; 0x1201
200007f0:	01020002 	tsteq	r2, r2
200007f4:	03020202 	movweq	r0, #8706	; 0x2202
200007f8:	02030103 	andeq	r0, r3, #-1073741824	; 0xc0000000
	...

2000080c <ball>:
2000080c:	200007d8 	ldrdcs	r0, [r0], -r8
	...
20000818:	00000001 	andeq	r0, r0, r1
2000081c:	00000001 	andeq	r0, r0, r1
20000820:	200005d9 	ldrdcs	r0, [r0], -r9
20000824:	2000062f 	andcs	r0, r0, pc, lsr #12
20000828:	20000685 	andcs	r0, r0, r5, lsl #13
2000082c:	200005b9 			; <UNDEFINED> instruction: 0x200005b9
20000830:	20000474 	andcs	r0, r0, r4, ror r4
20000834:	2000047e 	andcs	r0, r0, lr, ror r4
20000838:	20000488 	andcs	r0, r0, r8, lsl #9
2000083c:	20000492 	mulcs	r0, r2, r4
20000840:	2000049c 	mulcs	r0, ip, r4
20000844:	200004a6 	andcs	r0, r0, r6, lsr #9
20000848:	200004b0 			; <UNDEFINED> instruction: 0x200004b0
2000084c:	200004ba 			; <UNDEFINED> instruction: 0x200004ba

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	00000640 	andeq	r0, r0, r0, asr #12
   4:	00000004 	andeq	r0, r0, r4
   8:	01040000 	mrseq	r0, (UNDEF: 4)
   c:	0000005c 	andeq	r0, r0, ip, asr r0
  10:	0001e30c 	andeq	lr, r1, ip, lsl #6
	...
  20:	01a80200 			; <UNDEFINED> instruction: 0x01a80200
  24:	32010000 	andcc	r0, r1, #0
  28:	0000002c 	andeq	r0, r0, ip, lsr #32
  2c:	fa080103 	blx	200440 <startup-0x1fdffbc0>
  30:	04000000 	streq	r0, [r0], #-0
  34:	00000012 	andeq	r0, r0, r2, lsl r0
  38:	54330102 	ldrtpl	r0, [r3], #-258	; 0xfffffefe
  3c:	05000000 	streq	r0, [r0, #-0]
  40:	34010078 	strcc	r0, [r1], #-120	; 0xffffff88
  44:	0000002c 	andeq	r0, r0, ip, lsr #32
  48:	00790500 	rsbseq	r0, r9, r0, lsl #10
  4c:	002c3501 	eoreq	r3, ip, r1, lsl #10
  50:	00010000 	andeq	r0, r1, r0
  54:	0000f402 	andeq	pc, r0, r2, lsl #8
  58:	33360100 	teqcc	r6, #0, 2
  5c:	04000000 	streq	r0, [r0], #-0
  60:	00000195 	muleq	r0, r5, r1
  64:	9b370134 	blls	dc053c <startup-0x1f23fac4>
  68:	06000000 	streq	r0, [r0], -r0
  6c:	00000299 	muleq	r0, r9, r2
  70:	009b3801 	addseq	r3, fp, r1, lsl #16
  74:	06000000 	streq	r0, [r0], -r0
  78:	00000138 	andeq	r0, r0, r8, lsr r1
  7c:	009b3901 	addseq	r3, fp, r1, lsl #18
  80:	06040000 	streq	r0, [r4], -r0
  84:	0000013e 	andeq	r0, r0, lr, lsr r1
  88:	009b3a01 	addseq	r3, fp, r1, lsl #20
  8c:	05080000 	streq	r0, [r8, #-0]
  90:	01007870 	tsteq	r0, r0, ror r8
  94:	0000a23b 	andeq	sl, r0, fp, lsr r2
  98:	07000c00 	streq	r0, [r0, -r0, lsl #24]
  9c:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
  a0:	54080074 	strpl	r0, [r8], #-116	; 0xffffff8c
  a4:	b2000000 	andlt	r0, r0, #0
  a8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
  ac:	000000b2 	strheq	r0, [r0], -r2
  b0:	04030013 	streq	r0, [r3], #-19	; 0xffffffed
  b4:	0001da07 	andeq	sp, r1, r7, lsl #20
  b8:	00010200 	andeq	r0, r1, r0, lsl #4
  bc:	3c010000 	stccc	0, cr0, [r1], {-0}
  c0:	0000005f 	andeq	r0, r0, pc, asr r0
  c4:	00000002 	andeq	r0, r0, r2
  c8:	cf3c0100 	svcgt	0x003c0100
  cc:	0a000000 	beq	d4 <startup-0x1fffff2c>
  d0:	00005f04 	andeq	r5, r0, r4, lsl #30
  d4:	02d10400 	sbcseq	r0, r1, #0, 8
  d8:	01240000 			; <UNDEFINED> instruction: 0x01240000
  dc:	00014e3d 	andeq	r4, r1, sp, lsr lr
  e0:	65670500 	strbvs	r0, [r7, #-1280]!	; 0xfffffb00
  e4:	3e01006f 	cdpcc	0, 0, cr0, cr1, cr15, {3}
  e8:	000000c4 	andeq	r0, r0, r4, asr #1
  ec:	00240600 	eoreq	r0, r4, r0, lsl #12
  f0:	3f010000 	svccc	0x00010000
  f4:	0000009b 	muleq	r0, fp, r0
  f8:	00290604 	eoreq	r0, r9, r4, lsl #12
  fc:	3f010000 	svccc	0x00010000
 100:	0000009b 	muleq	r0, fp, r0
 104:	01120608 	tsteq	r2, r8, lsl #12
 108:	40010000 	andmi	r0, r1, r0
 10c:	0000009b 	muleq	r0, fp, r0
 110:	0117060c 	tsteq	r7, ip, lsl #12
 114:	40010000 	andmi	r0, r1, r0
 118:	0000009b 	muleq	r0, fp, r0
 11c:	02460610 	subeq	r0, r6, #16, 12	; 0x1000000
 120:	41010000 	mrsmi	r0, (UNDEF: 1)
 124:	00000164 	andeq	r0, r0, r4, ror #2
 128:	016d0614 	cmneq	sp, r4, lsl r6
 12c:	42010000 	andmi	r0, r1, #0
 130:	00000180 	andeq	r0, r0, r0, lsl #3
 134:	001f0618 	andseq	r0, pc, r8, lsl r6	; <UNPREDICTABLE>
 138:	43010000 	movwmi	r0, #4096	; 0x1000
 13c:	0000019c 	muleq	r0, ip, r1
 140:	0108061c 	tsteq	r8, ip, lsl r6
 144:	44010000 	strmi	r0, [r1], #-0
 148:	000001c2 	andeq	r0, r0, r2, asr #3
 14c:	590b0020 	stmdbpl	fp, {r5}
 150:	0c000001 	stceq	0, cr0, [r0], {1}
 154:	00000159 	andeq	r0, r0, r9, asr r1
 158:	5f040a00 	svcpl	0x00040a00
 15c:	0d000001 	stceq	0, cr0, [r0, #-4]
 160:	00000311 	andeq	r0, r0, r1, lsl r3
 164:	014e040a 	cmpeq	lr, sl, lsl #8
 168:	750b0000 	strvc	r0, [fp, #-0]
 16c:	0c000001 	stceq	0, cr0, [r0], {1}
 170:	00000175 	andeq	r0, r0, r5, ror r1
 174:	7b040a00 	blvc	10297c <startup-0x1fefd684>
 178:	0d000001 	stceq	0, cr0, [r0, #-4]
 17c:	00000311 	andeq	r0, r0, r1, lsl r3
 180:	016a040a 	cmneq	sl, sl, lsl #8
 184:	910b0000 	mrsls	r0, (UNDEF: 11)
 188:	0c000001 	stceq	0, cr0, [r0], {1}
 18c:	00000191 	muleq	r0, r1, r1
 190:	97040a00 	strls	r0, [r4, -r0, lsl #20]
 194:	0d000001 	stceq	0, cr0, [r0, #-4]
 198:	00000311 	andeq	r0, r0, r1, lsl r3
 19c:	0186040a 	orreq	r0, r6, sl, lsl #8
 1a0:	b70b0000 	strlt	r0, [fp, -r0]
 1a4:	0c000001 	stceq	0, cr0, [r0], {1}
 1a8:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 1ac:	00009b0c 	andeq	r9, r0, ip, lsl #22
 1b0:	009b0c00 	addseq	r0, fp, r0, lsl #24
 1b4:	0a000000 	beq	1bc <startup-0x1ffffe44>
 1b8:	0001bd04 	andeq	fp, r1, r4, lsl #26
 1bc:	03110d00 	tsteq	r1, #0, 26
 1c0:	040a0000 	streq	r0, [sl], #-0
 1c4:	000001a2 	andeq	r0, r0, r2, lsr #3
 1c8:	00030a02 	andeq	r0, r3, r2, lsl #20
 1cc:	d5450100 	strble	r0, [r5, #-256]	; 0xffffff00
 1d0:	02000000 	andeq	r0, r0, #0
 1d4:	00000309 	andeq	r0, r0, r9, lsl #6
 1d8:	01de4501 	bicseq	r4, lr, r1, lsl #10
 1dc:	040a0000 	streq	r0, [sl], #-0
 1e0:	000000d5 	ldrdeq	r0, [r0], -r5
 1e4:	00011c0e 	andeq	r1, r1, lr, lsl #24
 1e8:	b9550100 	ldmdblt	r5, {r8}^
 1ec:	05000000 	streq	r0, [r0, #-0]
 1f0:	0007d803 	andeq	sp, r7, r3, lsl #16
 1f4:	02410f20 	subeq	r0, r1, #32, 30	; 0x80
 1f8:	60010000 	andvs	r0, r1, r0
 1fc:	000001c8 	andeq	r0, r0, r8, asr #3
 200:	080c0305 	stmdaeq	ip, {r0, r2, r8, r9}
 204:	44102000 	ldrmi	r2, [r0], #-0
 208:	01000001 	tsteq	r0, r1
 20c:	07a2014e 	streq	r0, [r2, lr, asr #2]!
 210:	00362000 	eorseq	r2, r6, r0
 214:	9c010000 	stcls	0, cr0, [r1], {-0}
 218:	0000022a 	andeq	r0, r0, sl, lsr #4
 21c:	01007011 	tsteq	r0, r1, lsl r0
 220:	01d3014f 	bicseq	r0, r3, pc, asr #2
 224:	91020000 	mrsls	r0, (UNDEF: 2)
 228:	56100074 			; <UNDEFINED> instruction: 0x56100074
 22c:	01000002 	tsteq	r0, r2
 230:	078a0146 	streq	r0, [sl, r6, asr #2]
 234:	00182000 	andseq	r2, r8, r0
 238:	9c010000 	stcls	0, cr0, [r1], {-0}
 23c:	0000024f 	andeq	r0, r0, pc, asr #4
 240:	00736d12 	rsbseq	r6, r3, r2, lsl sp
 244:	4f014601 	svcmi	0x00014601
 248:	02000002 	andeq	r0, r0, #2
 24c:	03007491 	movweq	r7, #1169	; 0x491
 250:	01880704 	orreq	r0, r8, r4, lsl #14
 254:	c2100000 	andsgt	r0, r0, #0
 258:	01000001 	tsteq	r0, r1
 25c:	0756013e 	smmlareq	r6, lr, r1, r0
 260:	00342000 	eorseq	r2, r4, r0
 264:	9c010000 	stcls	0, cr0, [r1], {-0}
 268:	00000292 	muleq	r0, r2, r2
 26c:	00737512 	rsbseq	r7, r3, r2, lsl r5
 270:	4f013e01 	svcmi	0x00013e01
 274:	02000002 	andeq	r0, r0, #2
 278:	5e136c91 	mrcpl	12, 0, r6, cr3, cr1, {4}
 27c:	24200007 	strtcs	r0, [r0], #-7
 280:	11000000 	mrsne	r0, (UNDEF: 0)
 284:	3f010069 	svccc	0x00010069
 288:	00009b01 	andeq	r9, r0, r1, lsl #22
 28c:	74910200 	ldrvc	r0, [r1], #512	; 0x200
 290:	c5140000 	ldrgt	r0, [r4, #-0]
 294:	01000002 	tsteq	r0, r2
 298:	0744013a 	smlaldxeq	r0, r4, sl, r1
 29c:	00122000 	andseq	r2, r2, r0
 2a0:	9c010000 	stcls	0, cr0, [r1], {-0}
 2a4:	0001ce15 	andeq	ip, r1, r5, lsl lr
 2a8:	01320100 	teqeq	r2, r0, lsl #2
 2ac:	20000700 	andcs	r0, r0, r0, lsl #14
 2b0:	00000044 	andeq	r0, r0, r4, asr #32
 2b4:	ef109c01 	svc	0x00109c01
 2b8:	01000002 	tsteq	r0, r2
 2bc:	06840124 	streq	r0, [r4], r4, lsr #2
 2c0:	007c2000 	rsbseq	r2, ip, r0
 2c4:	9c010000 	stcls	0, cr0, [r1], {-0}
 2c8:	000002da 	ldrdeq	r0, [r0], -sl
 2cc:	01004f12 	tsteq	r0, r2, lsl pc
 2d0:	01d30124 	bicseq	r0, r3, r4, lsr #2
 2d4:	91020000 	mrsls	r0, (UNDEF: 2)
 2d8:	b8100074 	ldmdalt	r0, {r2, r4, r5, r6}
 2dc:	01000002 	tsteq	r0, r2
 2e0:	062e011f 			; <UNDEFINED> instruction: 0x062e011f
 2e4:	00562000 	subseq	r2, r6, r0
 2e8:	9c010000 	stcls	0, cr0, [r1], {-0}
 2ec:	00000315 	andeq	r0, r0, r5, lsl r3
 2f0:	01004f12 	tsteq	r0, r2, lsl pc
 2f4:	01d3011f 	bicseq	r0, r3, pc, lsl r1
 2f8:	91020000 	mrsls	r0, (UNDEF: 2)
 2fc:	0636136c 	ldrteq	r1, [r6], -ip, ror #6
 300:	00462000 	subeq	r2, r6, r0
 304:	69110000 	ldmdbvs	r1, {}	; <UNPREDICTABLE>
 308:	01200100 			; <UNDEFINED> instruction: 0x01200100
 30c:	0000009b 	muleq	r0, fp, r0
 310:	00749102 	rsbseq	r9, r4, r2, lsl #2
 314:	02d61000 	sbcseq	r1, r6, #0
 318:	1a010000 	bne	40320 <startup-0x1ffbfce0>
 31c:	0005d801 	andeq	sp, r5, r1, lsl #16
 320:	00005620 	andeq	r5, r0, r0, lsr #12
 324:	509c0100 	addspl	r0, ip, r0, lsl #2
 328:	12000003 	andne	r0, r0, #3
 32c:	1a01004f 	bne	40470 <startup-0x1ffbfb90>
 330:	0001d301 	andeq	sp, r1, r1, lsl #6
 334:	6c910200 	lfmvs	f0, 4, [r1], {0}
 338:	0005e013 	andeq	lr, r5, r3, lsl r0
 33c:	00004620 	andeq	r4, r0, r0, lsr #12
 340:	00691100 	rsbeq	r1, r9, r0, lsl #2
 344:	9b011b01 	blls	46f50 <startup-0x1ffb90b0>
 348:	02000000 	andeq	r0, r0, #0
 34c:	00007491 	muleq	r0, r1, r4
 350:	00027516 	andeq	r7, r2, r6, lsl r5
 354:	01160100 	tsteq	r6, r0, lsl #2
 358:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 35c:	00000020 	andeq	r0, r0, r0, lsr #32
 360:	03929c01 	orrseq	r9, r2, #256	; 0x100
 364:	4f120000 	svcmi	0x00120000
 368:	01160100 	tsteq	r6, r0, lsl #2
 36c:	000001d3 	ldrdeq	r0, [r0], -r3
 370:	17749102 	ldrbne	r9, [r4, -r2, lsl #2]!
 374:	000002fb 	strdeq	r0, [r0], -fp
 378:	9b011601 	blls	45b84 <startup-0x1ffba47c>
 37c:	02000000 	andeq	r0, r0, #0
 380:	02177091 	andseq	r7, r7, #145	; 0x91
 384:	01000003 	tsteq	r0, r3
 388:	009b0116 	addseq	r0, fp, r6, lsl r1
 38c:	91020000 	mrsls	r0, (UNDEF: 2)
 390:	5618006c 	ldrpl	r0, [r8], -ip, rrx
 394:	01000000 	mrseq	r0, (UNDEF: 0)
 398:	000418f2 	strdeq	r1, [r4], -r2
 39c:	0001a020 	andeq	sl, r1, r0, lsr #32
 3a0:	049c0100 	ldreq	r0, [ip], #256	; 0x100
 3a4:	19000004 	stmdbne	r0, {r2}
 3a8:	f2010078 	vqadd.s8	q0, <illegal reg q0.5>, q12
 3ac:	0000009b 	muleq	r0, fp, r0
 3b0:	195c9102 	ldmdbne	ip, {r1, r8, ip, pc}^
 3b4:	f2010079 	vqadd.s8	q0, <illegal reg q0.5>, <illegal reg q12.5>
 3b8:	0000009b 	muleq	r0, fp, r0
 3bc:	19589102 	ldmdbne	r8, {r1, r8, ip, pc}^
 3c0:	00746573 	rsbseq	r6, r4, r3, ror r5
 3c4:	009bf201 	addseq	pc, fp, r1, lsl #4
 3c8:	91020000 	mrsls	r0, (UNDEF: 2)
 3cc:	024b0f54 	subeq	r0, fp, #84, 30	; 0x150
 3d0:	f3010000 	vhadd.u8	d0, d1, d0
 3d4:	00000021 	andeq	r0, r0, r1, lsr #32
 3d8:	1a6f9102 	bne	1be47e8 <startup-0x1e41b818>
 3dc:	f3010063 	vhadd.u8	q0, <illegal reg q0.5>, <illegal reg q9.5>
 3e0:	00000021 	andeq	r0, r0, r1, lsr #32
 3e4:	0f679102 	svceq	0x00679102
 3e8:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 3ec:	0021f301 	eoreq	pc, r1, r1, lsl #6
 3f0:	91020000 	mrsls	r0, (UNDEF: 2)
 3f4:	02500f6e 	subseq	r0, r0, #440	; 0x1b8
 3f8:	f4010000 	vst4.8	{d0-d3}, [r1], r0
 3fc:	0000009b 	muleq	r0, fp, r0
 400:	00689102 	rsbeq	r9, r8, r2, lsl #2
 404:	0002a318 	andeq	sl, r2, r8, lsl r3
 408:	b2e70100 	rsclt	r0, r7, #0, 2
 40c:	66200003 	strtvs	r0, [r0], -r3
 410:	01000000 	mrseq	r0, (UNDEF: 0)
 414:	0004329c 	muleq	r4, ip, r2
 418:	00691a00 	rsbeq	r1, r9, r0, lsl #20
 41c:	0021e801 	eoreq	lr, r1, r1, lsl #16
 420:	91020000 	mrsls	r0, (UNDEF: 2)
 424:	006a1a77 	rsbeq	r1, sl, r7, ror sl
 428:	0021e801 	eoreq	lr, r1, r1, lsl #16
 42c:	91020000 	mrsls	r0, (UNDEF: 2)
 430:	621b0076 	andsvs	r0, fp, #118	; 0x76
 434:	01000002 	tsteq	r0, r2
 438:	00036ce0 	andeq	r6, r3, r0, ror #25
 43c:	00004620 	andeq	r4, r0, r0, lsr #12
 440:	649c0100 	ldrvs	r0, [ip], #256	; 0x100
 444:	1c000004 	stcne	0, cr0, [r0], {4}
 448:	00000051 	andeq	r0, r0, r1, asr r0
 44c:	0021e001 	eoreq	lr, r1, r1
 450:	91020000 	mrsls	r0, (UNDEF: 2)
 454:	01b71c77 			; <UNDEFINED> instruction: 0x01b71c77
 458:	e0010000 	and	r0, r1, r0
 45c:	00000021 	andeq	r0, r0, r1, lsr #32
 460:	00769102 	rsbseq	r9, r6, r2, lsl #2
 464:	00002e1b 	andeq	r2, r0, fp, lsl lr
 468:	2cda0100 	ldfcse	f0, [sl], {0}
 46c:	40200003 	eormi	r0, r0, r3
 470:	01000000 	mrseq	r0, (UNDEF: 0)
 474:	0004969c 	muleq	r4, ip, r6
 478:	003c1c00 	eorseq	r1, ip, r0, lsl #24
 47c:	da010000 	ble	40484 <startup-0x1ffbfb7c>
 480:	00000021 	andeq	r0, r0, r1, lsr #32
 484:	1c779102 	ldfnep	f1, [r7], #-8
 488:	000001b7 			; <UNDEFINED> instruction: 0x000001b7
 48c:	0021da01 	eoreq	sp, r1, r1, lsl #20
 490:	91020000 	mrsls	r0, (UNDEF: 2)
 494:	2a1b0076 	bcs	6c0674 <startup-0x1f93f98c>
 498:	01000001 	tsteq	r0, r1
 49c:	0002beca 	andeq	fp, r2, sl, asr #29
 4a0:	00006e20 	andeq	r6, r0, r0, lsr #28
 4a4:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
 4a8:	1c000004 	stcne	0, cr0, [r0], {4}
 4ac:	00000019 	andeq	r0, r0, r9, lsl r0
 4b0:	0021ca01 	eoreq	ip, r1, r1, lsl #20
 4b4:	91020000 	mrsls	r0, (UNDEF: 2)
 4b8:	01b71c77 			; <UNDEFINED> instruction: 0x01b71c77
 4bc:	ca010000 	bgt	404c4 <startup-0x1ffbfb3c>
 4c0:	00000021 	andeq	r0, r0, r1, lsr #32
 4c4:	1d769102 	ldfnep	f1, [r6, #-8]!
 4c8:	000002c5 	andeq	r0, r0, r5, asr #5
 4cc:	009ba501 	addseq	sl, fp, r1, lsl #10
 4d0:	001e0000 	andseq	r0, lr, r0
 4d4:	00441f00 	subeq	r1, r4, r0, lsl #30
 4d8:	c6010000 	strgt	r0, [r1], -r0
 4dc:	00000021 	andeq	r0, r0, r1, lsr #32
 4e0:	20000294 	mulcs	r0, r4, r2
 4e4:	0000002a 	andeq	r0, r0, sl, lsr #32
 4e8:	04fd9c01 	ldrbteq	r9, [sp], #3073	; 0xc01
 4ec:	b71c0000 	ldrlt	r0, [ip, -r0]
 4f0:	01000001 	tsteq	r0, r1
 4f4:	000021c6 	andeq	r2, r0, r6, asr #3
 4f8:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 4fc:	02e21f00 	rsceq	r1, r2, #0, 30
 500:	b0010000 	andlt	r0, r1, r0
 504:	00000021 	andeq	r0, r0, r1, lsr #32
 508:	20000200 	andcs	r0, r0, r0, lsl #4
 50c:	00000094 	muleq	r0, r4, r0
 510:	053e9c01 	ldreq	r9, [lr, #-3073]!	; 0xfffff3ff
 514:	b71c0000 	ldrlt	r0, [ip, -r0]
 518:	01000001 	tsteq	r0, r1
 51c:	000021b0 			; <UNDEFINED> instruction: 0x000021b0
 520:	6f910200 	svcvs	0x00910200
 524:	0100631a 	tsteq	r0, sl, lsl r3
 528:	000021b1 			; <UNDEFINED> instruction: 0x000021b1
 52c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 530:	0002c51d 	andeq	ip, r2, sp, lsl r5
 534:	9ba50100 	blls	fe94093c <ball+0xde940130>
 538:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
 53c:	861b0000 	ldrhi	r0, [fp], -r0
 540:	01000002 	tsteq	r0, r2
 544:	0001929f 	muleq	r1, pc, r2	; <UNPREDICTABLE>
 548:	00006e20 	andeq	r6, r0, r0, lsr #28
 54c:	6d9c0100 	ldfvss	f0, [ip]
 550:	1a000005 	bne	56c <startup-0x1ffffa94>
 554:	a0010063 	andge	r0, r1, r3, rrx
 558:	00000021 	andeq	r0, r0, r1, lsr #32
 55c:	1d779102 	ldfnep	f1, [r7, #-8]!
 560:	000002c5 	andeq	r0, r0, r5, asr #5
 564:	009ba501 	addseq	sl, fp, r1, lsl #10
 568:	001e0000 	andseq	r0, lr, r0
 56c:	01491800 	cmpeq	r9, r0, lsl #16
 570:	91010000 	mrsls	r0, (UNDEF: 1)
 574:	20000136 	andcs	r0, r0, r6, lsr r1
 578:	0000005c 	andeq	r0, r0, ip, asr r0
 57c:	05a19c01 	streq	r9, [r1, #3073]!	; 0xc01
 580:	c2200000 	eorgt	r0, r0, #0
 584:	01000001 	tsteq	r0, r1
 588:	00009b93 	muleq	r0, r3, fp
 58c:	00059300 	andeq	r9, r5, r0, lsl #6
 590:	1d001e00 	stcne	14, cr1, [r0, #-0]
 594:	00000256 	andeq	r0, r0, r6, asr r2
 598:	009b9501 	addseq	r9, fp, r1, lsl #10
 59c:	001e0000 	andseq	r0, lr, r0
 5a0:	01b01b00 	lslseq	r1, r0, #22
 5a4:	7f010000 	svcvc	0x00010000
 5a8:	200000dc 	ldrdcs	r0, [r0], -ip
 5ac:	0000005a 	andeq	r0, r0, sl, asr r0
 5b0:	05c59c01 	strbeq	r9, [r5, #3073]	; 0xc01
 5b4:	b71c0000 	ldrlt	r0, [ip, -r0]
 5b8:	01000001 	tsteq	r0, r1
 5bc:	0000217f 	andeq	r2, r0, pc, ror r1
 5c0:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 5c4:	015c2100 	cmpeq	ip, r0, lsl #2
 5c8:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
 5cc:	20000084 	andcs	r0, r0, r4, lsl #1
 5d0:	00000058 	andeq	r0, r0, r8, asr r0
 5d4:	05f39c01 	ldrbeq	r9, [r3, #3073]!	; 0xc01
 5d8:	78190000 	ldmdavc	r9, {}	; <UNPREDICTABLE>
 5dc:	21780100 	cmncs	r8, r0, lsl #2
 5e0:	02000000 	andeq	r0, r0, #0
 5e4:	631a6f91 	tstvs	sl, #580	; 0x244
 5e8:	21790100 	cmncs	r9, r0, lsl #2
 5ec:	02000000 	andeq	r0, r0, #0
 5f0:	21007791 			; <UNDEFINED> instruction: 0x21007791
 5f4:	00000173 	andeq	r0, r0, r3, ror r1
 5f8:	00287101 	eoreq	r7, r8, r1, lsl #2
 5fc:	005c2000 	subseq	r2, ip, r0
 600:	9c010000 	stcls	0, cr0, [r1], {-0}
 604:	00000621 	andeq	r0, r0, r1, lsr #12
 608:	01007819 	tsteq	r0, r9, lsl r8
 60c:	00002171 	andeq	r2, r0, r1, ror r1
 610:	6f910200 	svcvs	0x00910200
 614:	0100631a 	tsteq	r0, sl, lsl r3
 618:	00002172 	andeq	r2, r0, r2, ror r1
 61c:	77910200 	ldrvc	r0, [r1, r0, lsl #4]
 620:	019f2200 	orrseq	r2, pc, r0, lsl #4
 624:	6c010000 	stcvs	0, cr0, [r1], {-0}
 628:	20000010 	andcs	r0, r0, r0, lsl r0
 62c:	00000018 	andeq	r0, r0, r8, lsl r0
 630:	0a229c01 	beq	8a763c <startup-0x1f7589c4>
 634:	01000000 	mrseq	r0, (UNDEF: 0)
 638:	00000007 	andeq	r0, r0, r7
 63c:	00000c20 	andeq	r0, r0, r0, lsr #24
 640:	009c0100 	addseq	r0, ip, r0, lsl #2

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
   4:	030b130e 	movweq	r1, #45838	; 0xb30e
   8:	1117550e 	tstne	r7, lr, lsl #10
   c:	00171001 	andseq	r1, r7, r1
  10:	00160200 	andseq	r0, r6, r0, lsl #4
  14:	0b3a0e03 	bleq	e83828 <startup-0x1f17c7d8>
  18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  1c:	24030000 	strcs	r0, [r3], #-0
  20:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  24:	000e030b 	andeq	r0, lr, fp, lsl #6
  28:	01130400 	tsteq	r3, r0, lsl #8
  2c:	0b0b0e03 	bleq	2c3840 <startup-0x1fd3c7c0>
  30:	0b3b0b3a 	bleq	ec2d20 <startup-0x1f13d2e0>
  34:	00001301 	andeq	r1, r0, r1, lsl #6
  38:	03000d05 	movweq	r0, #3333	; 0xd05
  3c:	3b0b3a08 	blcc	2ce864 <startup-0x1fd3179c>
  40:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
  44:	0600000b 	streq	r0, [r0], -fp
  48:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
  4c:	0b3b0b3a 	bleq	ec2d3c <startup-0x1f13d2c4>
  50:	0b381349 	bleq	e04d7c <startup-0x1f1fb284>
  54:	24070000 	strcs	r0, [r7], #-0
  58:	3e0b0b00 	vmlacc.f64	d0, d11, d0
  5c:	0008030b 	andeq	r0, r8, fp, lsl #6
  60:	01010800 	tsteq	r1, r0, lsl #16
  64:	13011349 	movwne	r1, #4937	; 0x1349
  68:	21090000 	mrscs	r0, (UNDEF: 9)
  6c:	2f134900 	svccs	0x00134900
  70:	0a00000b 	beq	a4 <startup-0x1fffff5c>
  74:	0b0b000f 	bleq	2c00b8 <startup-0x1fd3ff48>
  78:	00001349 	andeq	r1, r0, r9, asr #6
  7c:	2701150b 	strcs	r1, [r1, -fp, lsl #10]
  80:	00130119 	andseq	r0, r3, r9, lsl r1
  84:	00050c00 	andeq	r0, r5, r0, lsl #24
  88:	00001349 	andeq	r1, r0, r9, asr #6
  8c:	0300130d 	movweq	r1, #781	; 0x30d
  90:	00193c0e 	andseq	r3, r9, lr, lsl #24
  94:	00340e00 	eorseq	r0, r4, r0, lsl #28
  98:	0b3a0e03 	bleq	e838ac <startup-0x1f17c754>
  9c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
  a0:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
  a4:	340f0000 	strcc	r0, [pc], #-0	; ac <startup-0x1fffff54>
  a8:	3a0e0300 	bcc	380cb0 <startup-0x1fc7f350>
  ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  b0:	00180213 	andseq	r0, r8, r3, lsl r2
  b4:	012e1000 			; <UNDEFINED> instruction: 0x012e1000
  b8:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
  bc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  c0:	01111927 	tsteq	r1, r7, lsr #18
  c4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
  c8:	01194296 			; <UNDEFINED> instruction: 0x01194296
  cc:	11000013 	tstne	r0, r3, lsl r0
  d0:	08030034 	stmdaeq	r3, {r2, r4, r5}
  d4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xfffff4c6
  d8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
  dc:	05120000 	ldreq	r0, [r2, #-0]
  e0:	3a080300 	bcc	200ce8 <startup-0x1fdff318>
  e4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
  e8:	00180213 	andseq	r0, r8, r3, lsl r2
  ec:	010b1300 	mrseq	r1, (UNDEF: 59)
  f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  f4:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
  f8:	03193f00 	tsteq	r9, #0, 30
  fc:	3b0b3a0e 	blcc	2ce93c <startup-0x1fd316c4>
 100:	11192705 	tstne	r9, r5, lsl #14
 104:	40061201 	andmi	r1, r6, r1, lsl #4
 108:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
 10c:	2e150000 	cdpcs	0, 1, cr0, cr5, cr0, {0}
 110:	03193f00 	tsteq	r9, #0, 30
 114:	3b0b3a0e 	blcc	2ce954 <startup-0x1fd316ac>
 118:	11192705 	tstne	r9, r5, lsl #14
 11c:	40061201 	andmi	r1, r6, r1, lsl #4
 120:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 124:	2e160000 	cdpcs	0, 1, cr0, cr6, cr0, {0}
 128:	03193f01 	tsteq	r9, #1, 30
 12c:	3b0b3a0e 	blcc	2ce96c <startup-0x1fd31694>
 130:	11192705 	tstne	r9, r5, lsl #14
 134:	40061201 	andmi	r1, r6, r1, lsl #4
 138:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
 13c:	00001301 	andeq	r1, r0, r1, lsl #6
 140:	03000517 	movweq	r0, #1303	; 0x517
 144:	3b0b3a0e 	blcc	2ce984 <startup-0x1fd3167c>
 148:	02134905 	andseq	r4, r3, #81920	; 0x14000
 14c:	18000018 	stmdane	r0, {r3, r4}
 150:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 154:	0b3a0e03 	bleq	e83968 <startup-0x1f17c698>
 158:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 15c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 160:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 164:	00130119 	andseq	r0, r3, r9, lsl r1
 168:	00051900 	andeq	r1, r5, r0, lsl #18
 16c:	0b3a0803 	bleq	e82180 <startup-0x1f17de80>
 170:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 174:	00001802 	andeq	r1, r0, r2, lsl #16
 178:	0300341a 	movweq	r3, #1050	; 0x41a
 17c:	3b0b3a08 	blcc	2ce9a4 <startup-0x1fd3165c>
 180:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 184:	1b000018 	blne	1ec <startup-0x1ffffe14>
 188:	0e03012e 	adfeqsp	f0, f3, #0.5
 18c:	0b3b0b3a 	bleq	ec2e7c <startup-0x1f13d184>
 190:	01111927 	tsteq	r1, r7, lsr #18
 194:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 198:	01194296 			; <UNDEFINED> instruction: 0x01194296
 19c:	1c000013 	stcne	0, cr0, [r0], {19}
 1a0:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
 1a4:	0b3b0b3a 	bleq	ec2e94 <startup-0x1f13d16c>
 1a8:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 1ac:	2e1d0000 	cdpcs	0, 1, cr0, cr13, cr0, {0}
 1b0:	03193f01 	tsteq	r9, #1, 30
 1b4:	3b0b3a0e 	blcc	2ce9f4 <startup-0x1fd3160c>
 1b8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1bc:	1e000019 	mcrne	0, 0, r0, cr0, cr9, {0}
 1c0:	00000018 	andeq	r0, r0, r8, lsl r0
 1c4:	03012e1f 	movweq	r2, #7711	; 0x1e1f
 1c8:	3b0b3a0e 	blcc	2cea08 <startup-0x1fd315f8>
 1cc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 1d0:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 1d4:	96184006 	ldrls	r4, [r8], -r6
 1d8:	13011942 	movwne	r1, #6466	; 0x1942
 1dc:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
 1e0:	03193f01 	tsteq	r9, #1, 30
 1e4:	3b0b3a0e 	blcc	2cea24 <startup-0x1fd315dc>
 1e8:	3c13490b 			; <UNDEFINED> instruction: 0x3c13490b
 1ec:	00130119 	andseq	r0, r3, r9, lsl r1
 1f0:	012e2100 			; <UNDEFINED> instruction: 0x012e2100
 1f4:	0b3a0e03 	bleq	e83a08 <startup-0x1f17c5f8>
 1f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1fc:	06120111 			; <UNDEFINED> instruction: 0x06120111
 200:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 204:	00130119 	andseq	r0, r3, r9, lsl r1
 208:	002e2200 	eoreq	r2, lr, r0, lsl #4
 20c:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 210:	0b3b0b3a 	bleq	ec2f00 <startup-0x1f13d100>
 214:	01111927 	tsteq	r1, r7, lsr #18
 218:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 21c:	00194297 	mulseq	r9, r7, r2
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	20000010 	andcs	r0, r0, r0, lsl r0
  14:	000007c8 	andeq	r0, r0, r8, asr #15
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	20000010 	andcs	r0, r0, r0, lsl r0
   4:	200007d8 	ldrdcs	r0, [r0], -r8
   8:	20000000 	andcs	r0, r0, r0
   c:	2000000c 	andcs	r0, r0, ip
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	000001f8 	strdeq	r0, [r0], -r8
   4:	00740002 	rsbseq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	43010000 	movwmi	r0, #4096	; 0x1000
  1c:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
  20:	2f737265 	svccs	0x00737265
  24:	75676f4a 	strbvc	r6, [r7, #-3914]!	; 0xfffff0b6
  28:	6f442f73 	svcvs	0x00442f73
  2c:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
  30:	2f73746e 	svccs	0x0073746e
  34:	64757453 	ldrbtvs	r7, [r5], #-1107	; 0xfffffbad
  38:	2f726569 	svccs	0x00726569
  3c:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
  40:	696d6172 	stmdbvs	sp!, {r1, r4, r5, r6, r8, sp, lr}^
  44:	4d2f676e 	stcmi	7, cr6, [pc, #-440]!	; fffffe94 <ball+0xdffff688>
  48:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
  4c:	614c2f6e 	cmpvs	ip, lr, ror #30
  50:	726f6262 	rsbvc	r6, pc, #536870918	; 0x20000006
  54:	6f697461 	svcvs	0x00697461
  58:	2f72656e 	svccs	0x0072656e
  5c:	6b726f57 	blvs	1c9bdc0 <startup-0x1e364240>
  60:	6b6f6f42 	blvs	1bdbd70 <startup-0x1e424290>
  64:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
  68:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
  6c:	61000067 	tstvs	r0, r7, rrx
  70:	706f7475 	rsbvc	r7, pc, r5, ror r4	; <UNPREDICTABLE>
  74:	2e676e6f 	cdpcs	14, 6, cr6, cr7, cr15, {3}
  78:	00010063 	andeq	r0, r1, r3, rrx
  7c:	05000000 	streq	r0, [r0, #-0]
  80:	00000002 	andeq	r0, r0, r2
  84:	5e131920 	vnmlspl.f16	s2, s6, s1	; <UNPREDICTABLE>
  88:	01000302 	tsteq	r0, r2, lsl #6
  8c:	02050001 	andeq	r0, r5, #1
  90:	20000010 	andcs	r0, r0, r0, lsl r0
  94:	0100eb03 	tsteq	r0, r3, lsl #22
  98:	68773d2f 	ldmdavs	r7!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, sp}^
  9c:	59e58359 	stmibpl	r5!, {r0, r3, r4, r6, r8, r9, pc}^
  a0:	83596875 	cmphi	r9, #7667712	; 0x750000
  a4:	676759d7 			; <UNDEFINED> instruction: 0x676759d7
  a8:	03741003 	cmneq	r4, #3
  ac:	10032070 	andne	r2, r3, r0, ror r0
  b0:	2072034a 	rsbscs	r0, r2, sl, asr #6
  b4:	3d3d223d 	lfmcc	f2, 4, [sp, #-244]!	; 0xffffff0c
  b8:	223d3d22 	eorscs	r3, sp, #2176	; 0x880
  bc:	2f4b223d 	svccs	0x004b223d
  c0:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
  c4:	4b4b3d3d 	blmi	12cf5c0 <startup-0x1ed30a40>
  c8:	3d4b4b4b 	vstrcc	d20, [fp, #-300]	; 0xfffffed4
  cc:	3d3d3e3d 	ldccc	14, cr3, [sp, #-244]!	; 0xffffff0c
  d0:	3d303d3d 	ldccc	13, cr3, [r0, #-244]!	; 0xffffff0c
  d4:	2f3d752f 	svccs	0x003d752f
  d8:	3d222545 	cfstr32cc	mvfx2, [r2, #-276]!	; 0xfffffeec
  dc:	3d3d68bb 	ldccc	8, cr6, [sp, #-748]!	; 0xfffffd14
  e0:	3d2f593d 			; <UNDEFINED> instruction: 0x3d2f593d
  e4:	3d3d592f 			; <UNDEFINED> instruction: 0x3d3d592f
  e8:	59303d59 	ldmdbpl	r0!, {r0, r3, r4, r6, r8, sl, fp, ip, sp}
  ec:	c93d303d 	ldmdbgt	sp!, {r0, r2, r3, r4, r5, ip, sp}
  f0:	4b675967 	blmi	19d6694 <startup-0x1e62996c>
  f4:	2f594b91 	svccs	0x00594b91
  f8:	593d2f3d 	ldmdbpl	sp!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, sp}
  fc:	3d59303d 	ldclcc	0, cr3, [r9, #-244]	; 0xffffff0c
 100:	3d917530 	cfldr32cc	mvfx7, [r1, #192]	; 0xc0
 104:	4b833d59 	blmi	fe0cf670 <ball+0xde0cee64>
 108:	3d593d91 	ldclcc	13, cr3, [r9, #-580]	; 0xfffffdbc
 10c:	3e4b833d 	mcrcc	3, 2, r8, cr11, cr13, {1}
 110:	004b9f4b 	subeq	r9, fp, fp, asr #30
 114:	4b030402 	blmi	c1124 <startup-0x1ff3eedc>
 118:	03040200 	movweq	r0, #16896	; 0x4200
 11c:	04020049 	streq	r0, [r2], #-73	; 0xffffffb7
 120:	00580601 	subseq	r0, r8, r1, lsl #12
 124:	06020402 	streq	r0, [r2], -r2, lsl #8
 128:	04020047 	streq	r0, [r2], #-71	; 0xffffffb9
 12c:	06580601 	ldrbeq	r0, [r8], -r1, lsl #12
 130:	00694c51 	rsbeq	r4, r9, r1, asr ip
 134:	06010402 	streq	r0, [r1], -r2, lsl #8
 138:	0402004a 	streq	r0, [r2], #-74	; 0xffffffb6
 13c:	02004a02 	andeq	r4, r0, #8192	; 0x2000
 140:	064a0304 	strbeq	r0, [sl], -r4, lsl #6
 144:	1308754b 	movwne	r7, #34123	; 0x854b
 148:	59595959 	ldmdbpl	r9, {r0, r3, r4, r6, r8, fp, ip, lr}^
 14c:	5a595959 	bpl	16566b8 <startup-0x1e9a9948>
 150:	4b3d753d 	blmi	f5d64c <startup-0x1f0a29b4>
 154:	c93e4b4d 	ldmdbgt	lr!, {r0, r2, r3, r6, r8, r9, fp, lr}
 158:	3dc99fd7 	stclcc	15, cr9, [r9, #860]	; 0x35c
 15c:	62039fae 	andvs	r9, r3, #696	; 0x2b8
 160:	201f03ac 	andscs	r0, pc, ip, lsr #7
 164:	3d3d6784 	ldccc	7, cr6, [sp, #-528]!	; 0xfffffdf0
 168:	02004b4b 	andeq	r4, r0, #76800	; 0x12c00
 16c:	003d0304 	eorseq	r0, sp, r4, lsl #6
 170:	08030402 	stmdaeq	r3, {r1, sl}
 174:	0402008f 	streq	r0, [r2], #-143	; 0xffffff71
 178:	063c0601 	ldrteq	r0, [ip], -r1, lsl #12
 17c:	004b4b3f 	subeq	r4, fp, pc, lsr fp
 180:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 184:	03040200 	movweq	r0, #16896	; 0x4200
 188:	02008f08 	andeq	r8, r0, #8, 30
 18c:	3c060104 	stfccs	f0, [r6], {4}
 190:	4b4b3f06 	blmi	12cfdb0 <startup-0x1ed30250>
 194:	0075754b 	rsbseq	r7, r5, fp, asr #10
 198:	06010402 	streq	r0, [r1], -r2, lsl #8
 19c:	684b064a 	stmdavs	fp, {r1, r3, r6, r9, sl}^
 1a0:	01040200 	mrseq	r0, R12_usr
 1a4:	91064a06 	tstls	r6, r6, lsl #20
 1a8:	2f4d4b5a 	svccs	0x004d4b5a
 1ac:	3d3d3d3d 	ldccc	13, cr3, [sp, #-244]!	; 0xffffff0c
 1b0:	01040200 	mrseq	r0, R12_usr
 1b4:	67062006 	strvs	r2, [r6, -r6]
 1b8:	2f2f9f3d 	svccs	0x002f9f3d
 1bc:	004b3d2f 	subeq	r3, fp, pc, lsr #26
 1c0:	3d030402 	cfstrscc	mvf0, [r3, #-8]
 1c4:	03040200 	movweq	r0, #16896	; 0x4200
 1c8:	0402002f 	streq	r0, [r2], #-47	; 0xffffffd1
 1cc:	02002f03 	andeq	r2, r0, #3, 30
 1d0:	002f0304 	eoreq	r0, pc, r4, lsl #6
 1d4:	2a030402 	bcs	c11e4 <startup-0x1ff3ee1c>
 1d8:	01040200 	mrseq	r0, R12_usr
 1dc:	50063c06 	andpl	r3, r6, r6, lsl #24
 1e0:	4c4e4c4b 	mcrrmi	12, 4, r4, lr, cr11
 1e4:	322f2f3d 	eorcc	r2, pc, #61, 30	; 0xf4
 1e8:	01040200 	mrseq	r0, R12_usr
 1ec:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 1f0:	02005901 	andeq	r5, r0, #16384	; 0x4000
 1f4:	023b0104 	eorseq	r0, fp, #4, 2
 1f8:	01010004 	tsteq	r1, r4

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	4f454750 	svcmi	0x00454750
   4:	5254454d 	subspl	r4, r4, #322961408	; 0x13400000
   8:	74730059 	ldrbtvc	r0, [r3], #-89	; 0xffffffa7
   c:	75747261 	ldrbvc	r7, [r4, #-609]!	; 0xfffffd9f
  10:	70740070 	rsbsvc	r0, r4, r0, ror r0
  14:	746e696f 	strbtvc	r6, [lr], #-2415	; 0xfffff691
  18:	6c617600 	stclvs	6, cr7, [r1], #-0
  1c:	6d006575 	cfstr32vs	mvfx6, [r0, #-468]	; 0xfffffe2c
  20:	0065766f 	rsbeq	r7, r5, pc, ror #12
  24:	78726964 	ldmdavc	r2!, {r2, r5, r6, r8, fp, sp, lr}^
  28:	72696400 	rsbvc	r6, r9, #0, 8
  2c:	72670079 	rsbvc	r0, r7, #121	; 0x79
  30:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
  34:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
  38:	5f657469 	svcpl	0x00657469
  3c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
  40:	00646e61 	rsbeq	r6, r4, r1, ror #28
  44:	70617267 	rsbvc	r7, r1, r7, ror #4
  48:	5f636968 	svcpl	0x00636968
  4c:	64616572 	strbtvs	r6, [r1], #-1394	; 0xfffffa8e
  50:	7461645f 	strbtvc	r6, [r1], #-1119	; 0xfffffba1
  54:	69700061 	ldmdbvs	r0!, {r0, r5, r6}^
  58:	006c6578 	rsbeq	r6, ip, r8, ror r5
  5c:	20554e47 	subscs	r4, r5, r7, asr #28
  60:	20393943 	eorscs	r3, r9, r3, asr #18
  64:	2e332e36 	mrccs	14, 1, r2, cr3, cr6, {1}
  68:	30322031 	eorscc	r2, r2, r1, lsr r0
  6c:	32303731 	eorscc	r3, r0, #12845056	; 0xc40000
  70:	28203531 	stmdacs	r0!, {r0, r4, r5, r8, sl, ip, sp}
  74:	656c6572 	strbvs	r6, [ip, #-1394]!	; 0xfffffa8e
  78:	29657361 	stmdbcs	r5!, {r0, r5, r6, r8, r9, ip, sp, lr}^
  7c:	52415b20 	subpl	r5, r1, #32, 22	; 0x8000
  80:	6d652f4d 	stclvs	15, cr2, [r5, #-308]!	; 0xfffffecc
  84:	64646562 	strbtvs	r6, [r4], #-1378	; 0xfffffa9e
  88:	362d6465 	strtcc	r6, [sp], -r5, ror #8
  8c:	6172622d 	cmnvs	r2, sp, lsr #4
  90:	2068636e 	rsbcs	r6, r8, lr, ror #6
  94:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
  98:	6e6f6973 			; <UNDEFINED> instruction: 0x6e6f6973
  9c:	35343220 	ldrcc	r3, [r4, #-544]!	; 0xfffffde0
  a0:	5d323135 	ldfpls	f3, [r2, #-212]!	; 0xffffff2c
  a4:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  a8:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  ac:	616d2d20 	cmnvs	sp, r0, lsr #26
  b0:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  b4:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  b8:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  bc:	6c666d2d 	stclvs	13, cr6, [r6], #-180	; 0xffffff4c
  c0:	2d74616f 	ldfcse	f6, [r4, #-444]!	; 0xfffffe44
  c4:	3d696261 	sfmcc	f6, 2, [r9, #-388]!	; 0xfffffe7c
  c8:	74666f73 	strbtvc	r6, [r6], #-3955	; 0xfffff08d
  cc:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xfffff2e0
  d0:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
  d4:	616d2d20 	cmnvs	sp, r0, lsr #26
  d8:	3d686372 	stclcc	3, cr6, [r8, #-456]!	; 0xfffffe38
  dc:	766d7261 	strbtvc	r7, [sp], -r1, ror #4
  e0:	206d2d36 	rsbcs	r2, sp, r6, lsr sp
  e4:	2d20672d 	stccs	7, cr6, [r0, #-180]!	; 0xffffff4c
  e8:	2d20304f 	stccs	0, cr3, [r0, #-316]!	; 0xfffffec4
  ec:	3d647473 	cfstrdcc	mvd7, [r4, #-460]!	; 0xfffffe34
  f0:	00393963 	eorseq	r3, r9, r3, ror #18
  f4:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
  f8:	6e750054 	mrcvs	0, 3, r0, cr5, cr4, {2}
  fc:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
 100:	63206465 			; <UNDEFINED> instruction: 0x63206465
 104:	00726168 	rsbseq	r6, r2, r8, ror #2
 108:	5f746573 	svcpl	0x00746573
 10c:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 110:	6f700064 	svcvs	0x00700064
 114:	70007873 	andvc	r7, r0, r3, ror r8
 118:	0079736f 	rsbseq	r7, r9, pc, ror #6
 11c:	6c6c6162 	stfvse	f6, [ip], #-392	; 0xfffffe78
 120:	6f65675f 	svcvs	0x0065675f
 124:	7274656d 	rsbsvc	r6, r4, #457179136	; 0x1b400000
 128:	72670079 	rsbvc	r0, r7, #121	; 0x79
 12c:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 130:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 134:	00657469 	rsbeq	r7, r5, r9, ror #8
 138:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 13c:	69730058 	ldmdbvs	r3!, {r3, r4, r6}^
 140:	0059657a 	subseq	r6, r9, sl, ror r5
 144:	6e69616d 	powvsez	f6, f1, #5.0
 148:	61726700 	cmnvs	r2, r0, lsl #14
 14c:	63696870 	cmnvs	r9, #112, 16	; 0x700000
 150:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 154:	6c616974 			; <UNDEFINED> instruction: 0x6c616974
 158:	00657a69 	rsbeq	r7, r5, r9, ror #20
 15c:	70617267 	rsbvc	r7, r1, r7, ror #4
 160:	5f636968 	svcpl	0x00636968
 164:	6c727463 	cfldrdvs	mvd7, [r2], #-396	; 0xfffffe74
 168:	7469625f 	strbtvc	r6, [r9], #-607	; 0xfffffda1
 16c:	656c635f 	strbvs	r6, [ip, #-863]!	; 0xfffffca1
 170:	67007261 	strvs	r7, [r0, -r1, ror #4]
 174:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 178:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 17c:	5f6c7274 	svcpl	0x006c7274
 180:	5f746962 	svcpl	0x00746962
 184:	00746573 	rsbseq	r6, r4, r3, ror r5
 188:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
 18c:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xfffff199
 190:	746e6920 	strbtvc	r6, [lr], #-2336	; 0xfffff6e0
 194:	65477400 	strbvs	r7, [r7, #-1024]	; 0xfffffc00
 198:	74656d6f 	strbtvc	r6, [r5], #-3439	; 0xfffff291
 19c:	69007972 	stmdbvs	r0, {r1, r4, r5, r6, r8, fp, ip, sp, lr}
 1a0:	5f74696e 	svcpl	0x0074696e
 1a4:	00707061 	rsbseq	r7, r0, r1, rrx
 1a8:	746e6975 	strbtvc	r6, [lr], #-2421	; 0xfffff68b
 1ac:	00745f38 	rsbseq	r5, r4, r8, lsr pc
 1b0:	656c6573 	strbvs	r6, [ip, #-1395]!	; 0xfffffa8d
 1b4:	635f7463 	cmpvs	pc, #1660944384	; 0x63000000
 1b8:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
 1bc:	656c6c6f 	strbvs	r6, [ip, #-3183]!	; 0xfffff391
 1c0:	65640072 	strbvs	r0, [r4, #-114]!	; 0xffffff8e
 1c4:	5f79616c 	svcpl	0x0079616c
 1c8:	726b696d 	rsbvc	r6, fp, #1785856	; 0x1b4000
 1cc:	6564006f 	strbvs	r0, [r4, #-111]!	; 0xffffff91
 1d0:	5f79616c 	svcpl	0x0079616c
 1d4:	6e303532 	mrcvs	5, 1, r3, cr0, cr2, {1}
 1d8:	69730073 	ldmdbvs	r3!, {r0, r1, r4, r5, r6}^
 1dc:	7974657a 	ldmdbvc	r4!, {r1, r3, r4, r5, r6, r8, sl, sp, lr}^
 1e0:	43006570 	movwmi	r6, #1392	; 0x570
 1e4:	73552f3a 	cmpvc	r5, #58, 30	; 0xe8
 1e8:	2f737265 	svccs	0x00737265
 1ec:	75676f4a 	strbvc	r6, [r7, #-3914]!	; 0xfffff0b6
 1f0:	6f442f73 	svcvs	0x00442f73
 1f4:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0xfffffa9d
 1f8:	2f73746e 	svccs	0x0073746e
 1fc:	64757453 	ldrbtvs	r7, [r5], #-1107	; 0xfffffbad
 200:	2f726569 	svccs	0x00726569
 204:	676f7250 			; <UNDEFINED> instruction: 0x676f7250
 208:	696d6172 	stmdbvs	sp!, {r1, r4, r5, r6, r8, sp, lr}^
 20c:	4d2f676e 	stcmi	7, cr6, [pc, #-440]!	; 5c <startup-0x1fffffa4>
 210:	6570706f 	ldrbvs	r7, [r0, #-111]!	; 0xffffff91
 214:	614c2f6e 	cmpvs	ip, lr, ror #30
 218:	726f6262 	rsbvc	r6, pc, #536870918	; 0x20000006
 21c:	6f697461 	svcvs	0x00697461
 220:	2f72656e 	svccs	0x0072656e
 224:	6b726f57 	blvs	1c9bf88 <startup-0x1e364078>
 228:	6b6f6f42 	blvs	1bdbf38 <startup-0x1e4240c8>
 22c:	7475612f 	ldrbtvc	r6, [r5], #-303	; 0xfffffed1
 230:	6e6f706f 	cdpvs	0, 6, cr7, cr15, cr15, {3}
 234:	75612f67 	strbvc	r2, [r1, #-3943]!	; 0xfffff099
 238:	6f706f74 	svcvs	0x00706f74
 23c:	632e676e 			; <UNDEFINED> instruction: 0x632e676e
 240:	6c616200 	sfmvs	f6, 2, [r1], #-0
 244:	7264006c 	rsbvc	r0, r4, #108	; 0x6c
 248:	6d007761 	stcvs	7, cr7, [r0, #-388]	; 0xfffffe7c
 24c:	006b7361 	rsbeq	r7, fp, r1, ror #6
 250:	65646e69 	strbvs	r6, [r4, #-3689]!	; 0xfffff197
 254:	65640078 	strbvs	r0, [r4, #-120]!	; 0xffffff88
 258:	5f79616c 	svcpl	0x0079616c
 25c:	6c6c696d 			; <UNDEFINED> instruction: 0x6c6c696d
 260:	72670069 	rsbvc	r0, r7, #105	; 0x69
 264:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 268:	72775f63 	rsbsvc	r5, r7, #396	; 0x18c
 26c:	5f657469 	svcpl	0x00657469
 270:	61746164 	cmnvs	r4, r4, ror #2
 274:	74657300 	strbtvc	r7, [r5], #-768	; 0xfffffd00
 278:	6a626f5f 	bvs	189bffc <startup-0x1e764004>
 27c:	5f746365 	svcpl	0x00746365
 280:	65657073 	strbvs	r7, [r5, #-115]!	; 0xffffff8d
 284:	72670064 	rsbvc	r0, r7, #100	; 0x64
 288:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 28c:	61775f63 	cmnvs	r7, r3, ror #30
 290:	725f7469 	subsvc	r7, pc, #1761607680	; 0x69000000
 294:	79646165 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sp, lr}^
 298:	6d756e00 	ldclvs	14, cr6, [r5, #-0]
 29c:	6e696f50 	mcrvs	15, 3, r6, cr9, cr0, {2}
 2a0:	67007374 	smlsdxvs	r0, r4, r3, r7
 2a4:	68706172 	ldmdavs	r0!, {r1, r4, r5, r6, r8, sp, lr}^
 2a8:	635f6369 	cmpvs	pc, #-1543503871	; 0xa4000001
 2ac:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
 2b0:	7263735f 	rsbvc	r7, r3, #2080374785	; 0x7c000001
 2b4:	006e6565 	rsbeq	r6, lr, r5, ror #10
 2b8:	61656c63 	cmnvs	r5, r3, ror #24
 2bc:	626f5f72 	rsbvs	r5, pc, #456	; 0x1c8
 2c0:	7463656a 	strbtvc	r6, [r3], #-1386	; 0xfffffa96
 2c4:	6c656400 	cfstrdvs	mvd6, [r5], #-0
 2c8:	355f7961 	ldrbcc	r7, [pc, #-2401]	; fffff96f <ball+0xdffff163>
 2cc:	736e3030 	cmnvc	lr, #48	; 0x30
 2d0:	624f7400 	subvs	r7, pc, #0, 8
 2d4:	7264006a 	rsbvc	r0, r4, #106	; 0x6a
 2d8:	6f5f7761 	svcvs	0x005f7761
 2dc:	63656a62 	cmnvs	r5, #401408	; 0x62000
 2e0:	72670074 	rsbvc	r0, r7, #116	; 0x74
 2e4:	69687061 	stmdbvs	r8!, {r0, r5, r6, ip, sp, lr}^
 2e8:	65725f63 	ldrbvs	r5, [r2, #-3939]!	; 0xfffff09d
 2ec:	6d006461 	cfstrsvs	mvf6, [r0, #-388]	; 0xfffffe7c
 2f0:	5f65766f 	svcpl	0x0065766f
 2f4:	656a626f 	strbvs	r6, [sl, #-623]!	; 0xfffffd91
 2f8:	73007463 	movwvc	r7, #1123	; 0x463
 2fc:	64656570 	strbtvs	r6, [r5], #-1392	; 0xfffffa90
 300:	70730078 	rsbsvc	r0, r3, r8, ror r0
 304:	79646565 	stmdbvc	r4!, {r0, r2, r5, r6, r8, sl, sp, lr}^
 308:	424f5000 	submi	r5, pc, #0
 30c:	5443454a 	strbpl	r4, [r3], #-1354	; 0xfffffab6
 310:	626f7400 	rsbvs	r7, pc, #0, 8
 314:	Address 0x00000314 is out of bounds.


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <startup-0x1ef2f2dc>
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xfffff2bb
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2073726f 	rsbscs	r7, r3, pc, ror #4
  2c:	30322d36 	eorscc	r2, r2, r6, lsr sp
  30:	712d3731 			; <UNDEFINED> instruction: 0x712d3731
  34:	70752d31 	rsbsvc	r2, r5, r1, lsr sp
  38:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0xfffffe9c
  3c:	2e362029 	cdpcs	0, 3, cr2, cr6, cr9, {1}
  40:	20312e33 	eorscs	r2, r1, r3, lsr lr
  44:	37313032 			; <UNDEFINED> instruction: 0x37313032
  48:	35313230 	ldrcc	r3, [r1, #-560]!	; 0xfffffdd0
  4c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0xfffff7e0
  50:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
  54:	5b202965 	blpl	80a5f0 <startup-0x1f7f5a10>
  58:	2f4d5241 	svccs	0x004d5241
  5c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xfffff29b
  60:	64656464 	strbtvs	r6, [r5], #-1124	; 0xfffffb9c
  64:	622d362d 	eorvs	r3, sp, #47185920	; 0x2d00000
  68:	636e6172 	cmnvs	lr, #-2147483620	; 0x8000001c
  6c:	65722068 	ldrbvs	r2, [r2, #-104]!	; 0xffffff98
  70:	69736976 	ldmdbvs	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
  74:	32206e6f 	eorcc	r6, r0, #1776	; 0x6f0
  78:	31353534 	teqcc	r5, r4, lsr r5
  7c:	Address 0x0000007c is out of bounds.


Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002a41 	andeq	r2, r0, r1, asr #20
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000020 	andeq	r0, r0, r0, lsr #32
  10:	4d2d3605 	stcmi	6, cr3, [sp, #-20]!	; 0xffffffec
  14:	070b0600 	streq	r0, [fp, -r0, lsl #12]
  18:	1201094d 	andne	r0, r1, #1261568	; 0x134000
  1c:	15011404 	strne	r1, [r1, #-1028]	; 0xfffffbfc
  20:	18031701 	stmdane	r3, {r0, r8, r9, sl, ip}
  24:	1a011901 	bne	46430 <startup-0x1ffb9bd0>
  28:	Address 0x00000028 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
  18:	20000000 	andcs	r0, r0, r0
  1c:	0000000c 	andeq	r0, r0, ip
  20:	00000018 	andeq	r0, r0, r8, lsl r0
  24:	00000000 	andeq	r0, r0, r0
  28:	20000010 	andcs	r0, r0, r0, lsl r0
  2c:	00000018 	andeq	r0, r0, r8, lsl r0
  30:	40080e41 	andmi	r0, r8, r1, asr #28
  34:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  38:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  3c:	0000001c 	andeq	r0, r0, ip, lsl r0
  40:	00000000 	andeq	r0, r0, r0
  44:	20000028 	andcs	r0, r0, r8, lsr #32
  48:	0000005c 	andeq	r0, r0, ip, asr r0
  4c:	40080e41 	andmi	r0, r8, r1, asr #28
  50:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  54:	180e4101 	stmdane	lr, {r0, r8, lr}
  58:	00070d41 	andeq	r0, r7, r1, asr #26
  5c:	0000001c 	andeq	r0, r0, ip, lsl r0
  60:	00000000 	andeq	r0, r0, r0
  64:	20000084 	andcs	r0, r0, r4, lsl #1
  68:	00000058 	andeq	r0, r0, r8, asr r0
  6c:	40080e41 	andmi	r0, r8, r1, asr #28
  70:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  74:	180e4101 	stmdane	lr, {r0, r8, lr}
  78:	00070d41 	andeq	r0, r7, r1, asr #26
  7c:	0000001c 	andeq	r0, r0, ip, lsl r0
  80:	00000000 	andeq	r0, r0, r0
  84:	200000dc 	ldrdcs	r0, [r0], -ip
  88:	0000005a 	andeq	r0, r0, sl, asr r0
  8c:	40080e41 	andmi	r0, r8, r1, asr #28
  90:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  94:	100e4101 	andne	r4, lr, r1, lsl #2
  98:	00070d41 	andeq	r0, r7, r1, asr #26
  9c:	00000018 	andeq	r0, r0, r8, lsl r0
  a0:	00000000 	andeq	r0, r0, r0
  a4:	20000136 	andcs	r0, r0, r6, lsr r1
  a8:	0000005c 	andeq	r0, r0, ip, asr r0
  ac:	40080e41 	andmi	r0, r8, r1, asr #28
  b0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  b4:	070d4101 	streq	r4, [sp, -r1, lsl #2]
  b8:	0000001c 	andeq	r0, r0, ip, lsl r0
  bc:	00000000 	andeq	r0, r0, r0
  c0:	20000192 	mulcs	r0, r2, r1
  c4:	0000006e 	andeq	r0, r0, lr, rrx
  c8:	40080e41 	andmi	r0, r8, r1, asr #28
  cc:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  d0:	100e4101 	andne	r4, lr, r1, lsl #2
  d4:	00070d41 	andeq	r0, r7, r1, asr #26
  d8:	0000001c 	andeq	r0, r0, ip, lsl r0
  dc:	00000000 	andeq	r0, r0, r0
  e0:	20000200 	andcs	r0, r0, r0, lsl #4
  e4:	00000094 	muleq	r0, r4, r0
  e8:	40080e41 	andmi	r0, r8, r1, asr #28
  ec:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
  f0:	180e4101 	stmdane	lr, {r0, r8, lr}
  f4:	00070d41 	andeq	r0, r7, r1, asr #26
  f8:	0000001c 	andeq	r0, r0, ip, lsl r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	20000294 	mulcs	r0, r4, r2
 104:	0000002a 	andeq	r0, r0, sl, lsr #32
 108:	40080e41 	andmi	r0, r8, r1, asr #28
 10c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 110:	100e4101 	andne	r4, lr, r1, lsl #2
 114:	00070d41 	andeq	r0, r7, r1, asr #26
 118:	0000001c 	andeq	r0, r0, ip, lsl r0
 11c:	00000000 	andeq	r0, r0, r0
 120:	200002be 			; <UNDEFINED> instruction: 0x200002be
 124:	0000006e 	andeq	r0, r0, lr, rrx
 128:	40080e41 	andmi	r0, r8, r1, asr #28
 12c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 130:	100e4101 	andne	r4, lr, r1, lsl #2
 134:	00070d41 	andeq	r0, r7, r1, asr #26
 138:	0000001c 	andeq	r0, r0, ip, lsl r0
 13c:	00000000 	andeq	r0, r0, r0
 140:	2000032c 	andcs	r0, r0, ip, lsr #6
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	40080e41 	andmi	r0, r8, r1, asr #28
 14c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 150:	100e4101 	andne	r4, lr, r1, lsl #2
 154:	00070d41 	andeq	r0, r7, r1, asr #26
 158:	0000001c 	andeq	r0, r0, ip, lsl r0
 15c:	00000000 	andeq	r0, r0, r0
 160:	2000036c 	andcs	r0, r0, ip, ror #6
 164:	00000046 	andeq	r0, r0, r6, asr #32
 168:	40080e41 	andmi	r0, r8, r1, asr #28
 16c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 170:	100e4101 	andne	r4, lr, r1, lsl #2
 174:	00070d41 	andeq	r0, r7, r1, asr #26
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	00000000 	andeq	r0, r0, r0
 180:	200003b2 			; <UNDEFINED> instruction: 0x200003b2
 184:	00000066 	andeq	r0, r0, r6, rrx
 188:	40080e41 	andmi	r0, r8, r1, asr #28
 18c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 190:	100e4101 	andne	r4, lr, r1, lsl #2
 194:	00070d41 	andeq	r0, r7, r1, asr #26
 198:	00000020 	andeq	r0, r0, r0, lsr #32
 19c:	00000000 	andeq	r0, r0, r0
 1a0:	20000418 	andcs	r0, r0, r8, lsl r4
 1a4:	000001a0 	andeq	r0, r0, r0, lsr #3
 1a8:	400c0e41 	andmi	r0, ip, r1, asr #28
 1ac:	87400384 	strbhi	r0, [r0, -r4, lsl #7]
 1b0:	018e4002 	orreq	r4, lr, r2
 1b4:	41300e41 	teqmi	r0, r1, asr #28
 1b8:	0000070d 	andeq	r0, r0, sp, lsl #14
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	00000000 	andeq	r0, r0, r0
 1c4:	200005b8 			; <UNDEFINED> instruction: 0x200005b8
 1c8:	00000020 	andeq	r0, r0, r0, lsr #32
 1cc:	40080e41 	andmi	r0, r8, r1, asr #28
 1d0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1d4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1d8:	00070d41 	andeq	r0, r7, r1, asr #26
 1dc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e0:	00000000 	andeq	r0, r0, r0
 1e4:	200005d8 	ldrdcs	r0, [r0], -r8
 1e8:	00000056 	andeq	r0, r0, r6, asr r0
 1ec:	40080e41 	andmi	r0, r8, r1, asr #28
 1f0:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 1f4:	180e4101 	stmdane	lr, {r0, r8, lr}
 1f8:	00070d41 	andeq	r0, r7, r1, asr #26
 1fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 200:	00000000 	andeq	r0, r0, r0
 204:	2000062e 	andcs	r0, r0, lr, lsr #12
 208:	00000056 	andeq	r0, r0, r6, asr r0
 20c:	40080e41 	andmi	r0, r8, r1, asr #28
 210:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 214:	180e4101 	stmdane	lr, {r0, r8, lr}
 218:	00070d41 	andeq	r0, r7, r1, asr #26
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	20000684 	andcs	r0, r0, r4, lsl #13
 228:	0000007c 	andeq	r0, r0, ip, ror r0
 22c:	40080e41 	andmi	r0, r8, r1, asr #28
 230:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 234:	100e4101 	andne	r4, lr, r1, lsl #2
 238:	00070d41 	andeq	r0, r7, r1, asr #26
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	20000700 	andcs	r0, r0, r0, lsl #14
 248:	00000044 	andeq	r0, r0, r4, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 254:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 258:	00000018 	andeq	r0, r0, r8, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	20000744 	andcs	r0, r0, r4, asr #14
 264:	00000012 	andeq	r0, r0, r2, lsl r0
 268:	40080e41 	andmi	r0, r8, r1, asr #28
 26c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 270:	070d4101 	streq	r4, [sp, -r1, lsl #2]
 274:	0000001c 	andeq	r0, r0, ip, lsl r0
 278:	00000000 	andeq	r0, r0, r0
 27c:	20000756 	andcs	r0, r0, r6, asr r7
 280:	00000034 	andeq	r0, r0, r4, lsr r0
 284:	40080e41 	andmi	r0, r8, r1, asr #28
 288:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 28c:	180e4101 	stmdane	lr, {r0, r8, lr}
 290:	00070d41 	andeq	r0, r7, r1, asr #26
 294:	0000001c 	andeq	r0, r0, ip, lsl r0
 298:	00000000 	andeq	r0, r0, r0
 29c:	2000078a 	andcs	r0, r0, sl, lsl #15
 2a0:	00000018 	andeq	r0, r0, r8, lsl r0
 2a4:	40080e41 	andmi	r0, r8, r1, asr #28
 2a8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2ac:	100e4101 	andne	r4, lr, r1, lsl #2
 2b0:	00070d41 	andeq	r0, r7, r1, asr #26
 2b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	200007a2 	andcs	r0, r0, r2, lsr #15
 2c0:	00000036 	andeq	r0, r0, r6, lsr r0
 2c4:	40080e41 	andmi	r0, r8, r1, asr #28
 2c8:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 2cc:	100e4101 	andne	r4, lr, r1, lsl #2
 2d0:	00070d41 	andeq	r0, r7, r1, asr #26
